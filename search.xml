<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[PACTF 2018 Write-Ups (Round 2 Part 1)]]></title>
      <url>/2018/05/08/pactf_2018_round_2_part_1/</url>
      <content type="html"><![CDATA[<p>Second round of <a href="https://2018.pactf.com" target="_blank" rel="external">PACTF</a>.</p>
<p>Team members: <a href="https://github.com/leniumc" target="_blank" rel="external">me</a>, <a href="https://github.com/altareen" target="_blank" rel="external">altareen</a>, <a href="https://github.com/MarchingVoxels" target="_blank" rel="external">aqdajz</a>, <a href="https://github.com/Sky1213814284" target="_blank" rel="external">illuminati</a>.</p>
<h2 id="Doppelganger-10-pt"><a href="#Doppelganger-10-pt" class="headerlink" title="Doppelgänger (10 pt)"></a>Doppelgänger (10 pt)</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>My friend Miles texted me today with this phrase “МОРЕ РОЕТ АТОМ”. I first thought that he went insane and has schizophasia. Apparently, it makes sense! Even though it doesn’t. So, what do you think is digging?</p>
<p>Hint: Consider the case and UTF-8 values of the characters…</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by illuminati and me.</p>
<p>We spent quite a lot of time on this problem, because we were typing the phrase ourselves (instead of directly copying it, which is the correct way of solving it). After doing that, we found from the UTF-8 values of the characters that they weren’t English characters. Directly copying the phrase into Google translate, the second translation is “SEA digs ATOM”. Combining that with the question in the problem “what do you think is digging?” reveals the flag.</p>
<pre><code>SEA
</code></pre><h2 id="Redacted-10-pt"><a href="#Redacted-10-pt" class="headerlink" title="Redacted (10 pt)"></a>Redacted (10 pt)</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>ANDOVER, MA— Phillips Academy Capture the Flag releases an institution-wide memorandum on the security of PDF documents. For privacy, parts of the memo are redacted.</p>
<p>View the memo: <a href="https://2018.pactf.com/static/ctfproblems/52af75d8-b1d4-450b-8262-d2f91de09d09/SECURE_REDACTED_COPY.42ce971cad34.pdf" target="_blank" rel="external">SECURE REDACTED MEMORANDUM</a>.</p>
<p>Hint: Redaction, huh?</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by me.</p>
<p>Open up the PDF, <code>ctrl+A</code> <code>ctrl+C</code>, open up a text editor, <code>ctrl+V</code>, and you have the flag.</p>
<pre><code>b3_car3ful_0r_y0ur_l3ak_m1ght_l3ak
</code></pre><h2 id="Am-I-Pwned-15-pt"><a href="#Am-I-Pwned-15-pt" class="headerlink" title="Am I Pwned? (15 pt)"></a>Am I Pwned? (15 pt)</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>I was talking on IRC with a guy who tricked me into giving him a hash of my password and then said he could hack me! He said I might be “pwned”! I know the hashing algorithm is MD5; that’s still secure, right?</p>
<p>… Oh, you want to know whether my password is secure or not?</p>
<p>It doesn’t have any uppercase letters or numbers or punctuation, but isn’t six characters still a lot? what he meant by that one. Would you be able to hack my password? Here’s the hash:</p>
<pre><code>eca065fba51916821eb7274c786c67d9
</code></pre><p>Hint: The hacker told me that “MD5 is kinda rekt”. That sounds bad, right? I mean, how long would it take to brute force it…</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by aqdajz.</p>
<p>Enter the md5 hash into a random md5 decryption website and you have the flag.</p>
<pre><code>lmaoez
</code></pre><h2 id="It’s-In-If-20-pt"><a href="#It’s-In-If-20-pt" class="headerlink" title="It’s In, If (20 pt)"></a>It’s In, If (20 pt)</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>My older brother sent me <a href="https://2018.pactf.com/static/ctfproblems/a187400b-032a-4ac8-9e79-ceb03d089b17/itsinif.8f2056d643d8.jpg" target="_blank" rel="external">this</a> photo, but I don’t know what to make of it.</p>
<p>Hint: What might big brother know?</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by altareen.</p>
<p>Just like the problem in round 1, the flag is also in the metadata, but this time you can’t directly find it in <code>Properties</code> in Windows.</p>
<pre><code>big_brother_is_looking_at_your_photos
</code></pre><h2 id="Letter-to-a-Machine-25-pt"><a href="#Letter-to-a-Machine-25-pt" class="headerlink" title="Letter to a Machine (25 pt)"></a>Letter to a Machine (25 pt)</h2><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem"></a>Problem</h3><p>You intercepted a <a href="https://2018.pactf.com/static/ctfproblems/47708183-239f-4565-834b-b5550c5634a4/letter.c5e1ae35c726.rar" target="_blank" rel="external">letter.rar</a>—but to read it, you have to prove that you are not a human. The password is <code>NOT</code> <code>BAD</code> + <code>FACE</code>.</p>
<p>Hint: I’m sure it’s just coincidence that <code>BAD</code> and <code>FACE</code> can be spelled with just the letters <code>ABCDEF</code>…</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by me.</p>
<p>The hint is quite important, <code>ABCDEF</code> are all in the range of hexadecimal numbers. Find an online logical operation calculator, like <a href="http://www.convertforfree.com/bitwise-calculator" target="_blank" rel="external">this</a> one. The logical operation of <code>NOT BAD</code> gives the result <code>-BAE</code>, then we simply add <code>-BAE</code> and <code>FACE</code>, and the result is <code>EF20</code>. Using this password, we can extract the rar file and the flag is inside a text file.</p>
<pre><code>lIZORZaOkWrIuNB
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PACTF </tag>
            
            <tag> Forensics </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PACTF 2018 Write-Ups (Round 1 Part 2)]]></title>
      <url>/2018/05/05/pactf_2018_round_1_part_2/</url>
      <content type="html"><![CDATA[<p>Problems can be found on <a href="https://2018.pactf.com" target="_blank" rel="external">PACTF</a>.</p>
<p>Team members: <a href="https://github.com/leniumc" target="_blank" rel="external">me</a>, <a href="https://github.com/altareen" target="_blank" rel="external">altareen</a>, <a href="https://github.com/MarchingVoxels" target="_blank" rel="external">aqdajz</a>, <a href="https://github.com/Sky1213814284" target="_blank" rel="external">illuminati</a>.</p>
<h2 id="Open-Sourcery-2018-30-pt"><a href="#Open-Sourcery-2018-30-pt" class="headerlink" title="Open Sourcery 2018 (30 pt)"></a>Open Sourcery 2018 (30 pt)</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>The solution to this problem lies within the Chromium source code. Literally. There is some string in there that mentions a flag and PACTF…</p>
<p>Hint: This problem builds off of a similarly named problem in PACTF 2017.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by me.</p>
<p>I actually looked through the problems and <a href="https://github.com/LFlare/ctf-writeups/tree/master/2017/pactf_2017/boole/open-sourcery-2_40" target="_blank" rel="external">write-ups</a> from PACTF 2017 and found a <a href="https://cs.chromium.org/codesearch/f/chromium/src/net/http/transport_security_state_static.json?cl=a3e1c143da13a37a641839334df9cfad6bba89b2" target="_blank" rel="external">website</a> related to Chromium.</p>
<p>Searching for <code>pactf</code> in the file reveals the flag.</p>
<pre><code>pactf-flag-4boxdpa21ogonzkcrs9p.com
</code></pre><h2 id="Credit-Card-Leak-35-pt"><a href="#Credit-Card-Leak-35-pt" class="headerlink" title="Credit Card Leak (35 pt)"></a>Credit Card Leak (35 pt)</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>ShoeShop was hacked, and all of their customer records were released online—including credit card numbers. One credit card in the leak is invalid, however. What is the invalid credit card number?</p>
<p>Here’s the leak: <a href="https://2018.pactf.com/static/ctfproblems/97042e12-5f99-4e79-a703-5593d531e4a2/cc_leak.txt.eecc6f896436.bz2" target="_blank" rel="external">cc_leak.txt.bz2</a></p>
<p>Hint: The credit card numbers in the leak are obviously all invalid, but most would pass a certain credit card validity test. All credit card numbers except one, that is.</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by altareen.</p>
<p>There was something called the Luhn Algorithm that could be used to solve this. The credit card numbers are clearly too much to paste onto an online validity check, so we used a simple Python script instead.</p>
<p>The flag was the invalid credit card number.</p>
<pre><code>8692015931457397
</code></pre><h2 id="Third-Eye-40-pt"><a href="#Third-Eye-40-pt" class="headerlink" title="Third Eye (40 pt)"></a>Third Eye (40 pt)</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>Sometimes​‌‌‌​‌‌‌​‌‌​ there‌​​​​‌‌​​​​‌ is ​‌‌‌​‌​​​‌​‌‌‌more ‌‌​‌‌​​‌​‌​‌‌​‌‌​​​‌‌‌​​‌‌​‌‌​​‌​‌​‌​‌‌‌‌‌​‌‌​‌‌​​​‌‌‌​‌​‌​‌‌‌​​‌​​‌‌​‌​‌‌​‌‌‌​​‌‌​‌​‌‌‌‌‌​‌‌​​​‌than ​​‌‌​​‌​‌​‌‌​‌‌meets ‌​​‌‌​​‌​‌​‌‌​​​the ​‌​‌‌‌​‌​​​‌‌​‌​​​​‌​‌‌‌‌‌​‌‌‌eye​‌​​​‌‌​‌​​​​‌‌​​‌​‌​‌​‌‌‌‌‌​‌‌​​‌​‌​‌‌‌‌​​‌​‌‌​​‌​‌.</p>
<p>Hint: Maybe if you just squint harder…</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by altareen and me.</p>
<p>You’ll have to go to the original webpage to solve this.</p>
<p>Looking at the HTML code of the page, we found this.</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
Sometimes<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span> 
there<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span> 
is <span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span>more <span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>than <span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>meets <span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>the <span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>eye<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>
<span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span><span class="token entity" title="&#8203;">&amp;#8203;</span><span class="token entity" title="&zwnj;">&amp;zwnj;</span>.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
</code></pre>
<p>Treating <code>&amp;#8203;</code> as 0 and <code>&amp;zwnj;</code> as 1 and putting them in groups of 8, we obtain this.</p>
<pre><code>01110111
01101000
01100001
01110100
01011111
01100101
01101100
01110011
01100101
01011111
01101100
01110101
01110010
01101011
01110011
01011111
01100010
01100101
01101110
01100101
01100001
01110100
01101000
01011111
01110100
01101000
01100101
01011111
01100101
01111001
01100101
</code></pre><p>Treating each group as a binary ascii value, and converting them to letters reveal the flag.</p>
<pre><code>what_else_lurks_beneath_the_eye
</code></pre><h2 id="Security-Through-Obscurity-50-pt"><a href="#Security-Through-Obscurity-50-pt" class="headerlink" title="Security Through Obscurity? (50 pt)"></a>Security Through Obscurity? (50 pt)</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>We intercepted this message, but we can’t make heads or tails of it. It was rattled off so fast, too… How could anyone be that good at using a cipher?</p>
<p>Anyway, here’s the message. Good luck!</p>
<p><code>Tązhii, Łį́į́ʼ, Dzeeh Mąʼii, Dibé yázhí, Wóláchííʼ, Tłʼízí Tin, Dibé Mósí, Łį́į́ʼ, Dzeeh, Dibé, Tązhii, Dzeeh, Gah, Neeshchʼííʼ, Dzeeh, Béésh dootłʼizh</code></p>
<p>Hint: This definitely doesn’t look like English. What else could it be? Perhaps looking through the history books might help…</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by aqdajz.</p>
<p>After some Googling, we found that the message was written in a language called Navajo, and taking the first letter of the English translation of each word, we could obtain the flag.</p>
<p>Fortunately, we found a <a href="https://gist.github.com/TheZ3ro/572ef81c0f20bf9c4c435b32a62a7056" target="_blank" rel="external">script</a> that could do it for us. We end up with the sentence “THE FLAG IS CHESTERNEZ”.</p>
<pre><code>CHESTERNEZ
</code></pre><h2 id="Beats-by-Dr-K-Problem-55-pt"><a href="#Beats-by-Dr-K-Problem-55-pt" class="headerlink" title="Beats by Dr. K Problem (55 pt)"></a>Beats by Dr. K Problem (55 pt)</h2><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem"></a>Problem</h3><p>Dr. K just released her new EP — download her <a href="https://2018.pactf.com/static/ctfproblems/1b2c440a-37e0-4500-bd85-c88e2ebba3a5/bits.675c46a10049.wav" target="_blank" rel="external">track</a> now!</p>
<p>Hint: Listen to each bit…</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by altareen.</p>
<p>Opening the wav file in an audio editor and looking at the high frequency part of the spectrogram of the audio, we could find a pattern. Each beat can be intepreted as a 0 or 1 based on its pattern in the spectrogram. Using the same technique as the one used in <code>Third Eye</code>, we can obtain the flag.</p>
<pre><code>01100110
01101100
01100001
01100111
01101001
01110011
01110000
01100001
01100011
01110100
01100110
01101101
01110101
01110011
01101001
01100011
</code></pre><pre><code>flagispactfmusic
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PACTF </tag>
            
            <tag> Forensics </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PACTF 2018 Write-Ups (Round 1 Part 1)]]></title>
      <url>/2018/05/01/pactf_2018_round_1_part_1/</url>
      <content type="html"><![CDATA[<p>My first CTF game. Problems can be found on <a href="https://2018.pactf.com" target="_blank" rel="external">PACTF</a>.</p>
<p>Teamed up with two classmates (<a href="https://github.com/MarchingVoxels" target="_blank" rel="external">aqdajz</a> and <a href="https://github.com/Sky1213814284" target="_blank" rel="external">illuminati</a>) and my computer science teacher (<a href="https://github.com/altareen" target="_blank" rel="external">altareen</a>).</p>
<h2 id="A-Picture-is-a-Thousand-Words-10-pt"><a href="#A-Picture-is-a-Thousand-Words-10-pt" class="headerlink" title="A Picture is a Thousand Words (10 pt)"></a>A Picture is a Thousand Words (10 pt)</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Apparently there is something hidden in this <a href="https://2018.pactf.com/static/ctfproblems/e3c7fb33-b5e4-4b99-ac78-b0ae420ba413/image.d25eefefc427.jpg" target="_blank" rel="external">image</a>…</p>
<p>Hint: You’re looking for text—how might you look at the text of the image?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by altareen.</p>
<p>Solving this was quite easy. Just looking at the image metadata in <code>Properties</code> reveals the flag.</p>
<pre><code>flag_is_DjKVIXXQRZZrrAd
</code></pre><h2 id="Straight-From-The-Emperor-10-pt"><a href="#Straight-From-The-Emperor-10-pt" class="headerlink" title="Straight From The Emperor (10 pt)"></a>Straight From The Emperor (10 pt)</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>The Emperor says <code>ny_nx_tsq3_zumnqq_kwtr_mjwj_68999cae77</code>–what could it possibly mean? I hear that he ‘encrypts’ numbers now too, something about appending them to the alphabet…</p>
<p>Hint: Some say he’s an emperor, I say he’s a salad.</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by me.</p>
<p>Looking at the hint, we know directly that this is a Caesar cipher problem. After appending numbers to the alphabet, as hinted in the problem, and running a Caesar cipher solver, we obtain the flag.</p>
<pre><code>IT_IS_ONLY_UPHILL_FROM_HERE_1344475922
</code></pre><h2 id="Caesar-Cipher-20-pt"><a href="#Caesar-Cipher-20-pt" class="headerlink" title="Caesar Cipher? (20 pt)"></a>Caesar Cipher? (20 pt)</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>“Cowards die many times before their deaths; the valiant only taste of death but once.” (1007, 1008) Are you valiant enough to figure this out?</p>
<p><code>5:6 1139:4 1620:3 172:4</code></p>
<p>Hint: There’s a lot of text on the Internet and in print. What if you could send messages using all of that data? But you’d have to pick something pretty famous…</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by me.</p>
<p>Apparently, this is not a Caesar cipher, and after some Googling, we find that the quote is actually from the play Julius Caesar.</p>
<p>Further Googling leads us to <a href="https://www.opensourceshakespeare.org/views/plays/play_view.php?WorkID=juliuscaesar&amp;Scope=entire&amp;pleasewait=1&amp;msg=pl" target="_blank" rel="external">this</a> page. Looking at line 1007 and 1008, we can verify that it is the correct source.</p>
<p>Taking the 6th word of line 5, 4th word of line 1139, 3rd word of line 1620, and 4th word of line 172, we obtain the sentence <code>the answer is Cassius</code>. Thus, the flag is just what the sentence means.</p>
<pre><code>Cassius
</code></pre><h2 id="Let-Me-In-20-pt"><a href="#Let-Me-In-20-pt" class="headerlink" title="Let Me In (20 pt)"></a>Let Me In (20 pt)</h2><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>You received this <a href="https://2018.pactf.com/static/ctfproblems/ff3f0519-665a-4b0d-810a-65b1d0425fb6/account.5a52b336da78.rar" target="_blank" rel="external">account.rar</a> file, but it is ‘protected’ under a password. Can you break in?</p>
<p>Hint: Something tells me the user might not be using complex passwords…</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by me.</p>
<p>This problem was solved more easily than it intended to be. I simply tried the password <code>123456</code> and got in. XD</p>
<p>The flag is just inside a plain text file inside the rar.</p>
<pre><code>rgSueiMYehWJSZPZr
</code></pre><h2 id="Bad-Melody-30-pt"><a href="#Bad-Melody-30-pt" class="headerlink" title="Bad Melody (30 pt)"></a>Bad Melody (30 pt)</h2><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem"></a>Problem</h3><p>Our musician friend Martin recently bought a melody pack containing different melodies recorded in MIDI format. He hoped to use them in his electronic music tracks and then pretend that he was the person who actually wrote them. He spent a solid hundred dollars, but the website selling sample packs fooled him! Instead of 10 wonderful melodies, he only received one MIDI file. It sounded awful, and Martin quickly noticed why!</p>
<p>Can you notice why?</p>
<p>See for yourself: <a href="https://2018.pactf.com/static/ctfproblems/74f8a213-9531-405a-b425-02b38ea80972/melody.4f1964921e6a.mid" target="_blank" rel="external">melody.mid</a></p>
<p>Hint: How would you edit MIDI?</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>Solved by aqdajz.</p>
<p>Just open up the MIDI file in a random MIDI editor and the arrangement of the notes simply spell out the flag.</p>
<pre><code>WRITE YOUR OWN MUSIC
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PACTF </tag>
            
            <tag> Forensics </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Python写一个Pixiv爬虫（三）]]></title>
      <url>/2018/04/18/pixiv_crawler_3/</url>
      <content type="html"><![CDATA[<p>完整程序详见<a href="https://github.com/leniumC/pixiv-crawler/" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="获取搜索结果网页"><a href="#获取搜索结果网页" class="headerlink" title="获取搜索结果网页"></a>获取搜索结果网页</h2><p>打开任意搜索结果页，发现URL为如下格式。</p>
<pre class=" language-python"><code class="language-python">url <span class="token operator">=</span><span class="token string">'https://www.pixiv.net/search.php?s_mode=s_tag&amp;word='</span> <span class="token operator">+</span> search_keyword <span class="token operator">+</span> <span class="token string">'&amp;p='</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre>
<p>其中<code>search_keyword</code>为搜索关键词，<code>str(i)</code>为搜索结果的页码。</p>
<p>同时，发现<code>search_keyword</code>需要经过URL Encode，Python中实现如下。</p>
<pre class=" language-python"><code class="language-python">search_keyword <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>raw_keyword<span class="token punctuation">)</span>
</code></pre>
<p>其中，<code>raw_keyword</code>为用户输入的关键词，<code>search_keyword</code>为经过URL Encode的关键词。</p>
<p>通过循环遍历<code>i</code>的值以爬取所有搜索结果（可加以限定以满足用户要求）。</p>
<p>每次循环，通过以下方式获取网页HTML并保存至文件中。</p>
<pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> se<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'htmls/page-'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>
    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<h2 id="获取图片信息"><a href="#获取图片信息" class="headerlink" title="获取图片信息"></a>获取图片信息</h2><p>对搜索结果页面HTML进行分析，发现每张图片均对应一个<code>class=&quot;_25taFA4&quot;</code>的<code>div</code>标签，里面储存了较多与图片相关的信息。</p>
<p>然而，查看爬取到的HTML文件，并没有这样的<code>div</code>标签，猜测是通过其它信息在网页加载之后生成的。</p>
<p>于是，在HTML文件中对图片名称进行搜索，发现一个很长的<code>input</code>标签。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js-mount-point-search-result-list<span class="token punctuation">"</span></span> <span class="token attr-name">data-items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(json data)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>其中，<code>data-items</code>里以json的形式储存了该页面所有图片的信息。</p>
<p>使用Python自带的json模块进行解码与转换。</p>
<pre class=" language-python"><code class="language-python">soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>
data_items <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token string">'js-mount-point-search-result-list'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data-items'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>得到类似以下格式的信息。</p>
<pre><code>{&#39;illustId&#39;: &#39;68214616&#39;, &#39;illustTitle&#39;: &#39;マジカルミライ&#39;, &#39;illustType&#39;: &#39;0&#39;, 
&#39;url&#39;: &#39;https://i.pximg.net/c/240x240/img-master/img/2018/04/14/00/02/34/68214616_p0_master1200.jpg&#39;, 
&#39;tags&#39;: [&#39;初音ミク&#39;, &#39;マジカルミライ&#39;, &#39;マジカルミライ2018&#39;, &#39;仕事絵&#39;, &#39;オリジナル&#39;, &#39;本家&#39;, &#39;VOCALOID&#39;, &#39;VOCALOID10000users入り&#39;], 
&#39;userId&#39;: &#39;1039353&#39;, &#39;userName&#39;: &#39;Mika Pikazo&#39;, 
&#39;userImage&#39;: &#39;https://i.pximg.net/user-profile/img/2015/11/29/14/24/39/10176306_867db1c4e1ae0c1be06d5e00e4a6381e_50.png&#39;, 
&#39;isBookmarkable&#39;: True, &#39;isBookmarked&#39;: False, &#39;width&#39;: 921, &#39;height&#39;: 900, 
&#39;pageCount&#39;: 2, &#39;bookmarkCount&#39;: 12678, &#39;responseCount&#39;: 0}
</code></pre><p>对图片进行大小、图片数量、收藏数量等数据进行筛选即可获取需要的图片。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Recursion]]></title>
      <url>/2018/04/02/ap_comp_sci_a_35/</url>
      <content type="html"><![CDATA[<h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>Recursion is a programming technique in which a method calls itself.</p>
<p>Recursion can always be used in place of iteration, and iteration can always be used in place of recursion.</p>
<p>There are many situations in which recursion provides the clearest, shortest, and most elegant solution to a programming task.</p>
<p>A recursive method has two kinds of cases:</p>
<p>1) One of more stopping or base cases that solve the problem without any recursive calls.</p>
<p>2) One or more cases that include a recursive call (involving a simpler problem).</p>
<h2 id="Guidelines-for-Writing-Recursive-Methods"><a href="#Guidelines-for-Writing-Recursive-Methods" class="headerlink" title="Guidelines for Writing Recursive Methods"></a>Guidelines for Writing Recursive Methods</h2><h3 id="Must-have-a-base-case"><a href="#Must-have-a-base-case" class="headerlink" title="Must have a base case"></a>Must have a base case</h3><p>Just as we guard against infinite loops, we must avoid recursions that never come to an end.</p>
<p>A recursive method must have a well-defined termination or stopping state, also referred to as a base case.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Recursive-case-must-approach-the-base-case"><a href="#Recursive-case-must-approach-the-base-case" class="headerlink" title="Recursive case must approach the base case"></a>Recursive case must approach the base case</h3><p>The recursive step, in which a method calls itself, must eventually lead to a base case.</p>
<p>Since each invocation of the method is passed a smaller value, eventually the stopping state must be reached.</p>
<p>If a method failed to reach a stopping state, the Java interpreter would run out of memory, at which point the program would terminate with a stack overflow error.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Characteristics-of-Recursive-Methods"><a href="#Characteristics-of-Recursive-Methods" class="headerlink" title="Characteristics of Recursive Methods"></a>Characteristics of Recursive Methods</h2><p>Here are the key features common to all recursive routines:</p>
<p>The method calls itself.</p>
<p>When the method calls itself, it does so to solve a smaller problem.</p>
<p>There’s some version of the problem which is so simple that the method can solve it and return (this is the base case).</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Merge Sort]]></title>
      <url>/2018/03/27/ap_comp_sci_a_34/</url>
      <content type="html"><![CDATA[<h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>Merge sort is a good example of the divide and conquer principle.</p>
<p>Generally, it proceeds as follows:</p>
<p>Break the problem into subproblems of same type.</p>
<p>Solve these subproblems recursively.</p>
<p>Combine the solutions found for the individual subproblems into a solution for the entire problem.</p>
<h2 id="Divide-and-Conquer"><a href="#Divide-and-Conquer" class="headerlink" title="Divide and Conquer"></a>Divide and Conquer</h2><p>Divide the problem size into more comprehensible pieces.</p>
<p>Conquer, or resolve, the smaller pieces recursively.</p>
<p>Combine, or put the pieces back together, to create the final solution.</p>
<p>Divide step: divide the array in half.</p>
<p>Conquer step: sort each half of the array. Note that the base case of a one-element array is considered sorted.</p>
<p>Combine step: merge the two halves into a single sorted array.</p>
<p>Note: A disadvantage of the merge sort is the need for a temporary array, similar in size to the one being sorted. This means that merge sort requires more memory than the other methods.</p>
<p>We divide the array until we have arrived at the base case, where it is assumed that an array with one element can be considered sorted.</p>
<p>Now, we must apply the combine step. Each of the one-element arrays are merged into a sorted array of 2 elements. The smaller element is placed into the merged array first, then the larger element goes in.</p>
<p>Each of these 2-element arrays are then merged into a 4-element array, using the same technique, and so on.</p>
<p>The runtime of the merge sort algorithm is nlog<sub>2</sub>n, while the runtime of the other algorithms are n<sup>2</sup>, so it is faster.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            k <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Insertion Sort]]></title>
      <url>/2018/03/26/ap_comp_sci_a_33/</url>
      <content type="html"><![CDATA[<h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><p>The array of elements is separated into two parts: a partially sorted part, and an unsorted part.</p>
<p>Partially sorted means that the elements are sorted amongst themselves.</p>
<p>However, the elements are not necessary in their final positions, because they may still need to be moved when other elements are inserted between them.</p>
<h2 id="The-Insertion-Sort-Algorithm"><a href="#The-Insertion-Sort-Algorithm" class="headerlink" title="The Insertion Sort Algorithm"></a>The Insertion Sort Algorithm</h2><p>The algorithm begins with the first element as the partially sorted section, the second element as the item under consideration, and the rest of the array as the unsorted section.</p>
<p>The goal is to insert the item under consideration into the appropriate place in the partially sorted group. To achieve this goal, we may need to shift some elements to the right, to make room for the insert.</p>
<p>To provide a space for this shift, we place the item under consideration into a temporary variable. This leaves an empty space in the array.</p>
<p>Then, we compare the item under consideration to its left-hand neighbor in the partially sorted group.</p>
<p>If this neighbor is larger, it gets shifted to the right, and the item under consideration is inserted into its place.</p>
<p>If this neighbor is smaller, then the item under consideration is placed where it was. Now, the partially sorted group contains one more element.</p>
<p>In general, you keep shifting partially sorted elements to the right, until you find the proper position for the item under consideration, an you insert the item at that spot.</p>
<p>This process is repeated until all the unsorted items have been inserted.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertionSort</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                j <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Selection Sort]]></title>
      <url>/2018/03/22/ap_comp_sci_a_32/</url>
      <content type="html"><![CDATA[<h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><p>In general, sorting algorithms take data which exists in an array and rearrange it into a particular order.</p>
<p>The selection sort is commonly known as a search and swap algorithm, due to its behavior.</p>
<p>It works by selecting the smallest unsorted item remaining in the array, and then swapping it with the item in the next position to be filled.</p>
<h2 id="The-Selection-Sort-Algorithm"><a href="#The-Selection-Sort-Algorithm" class="headerlink" title="The Selection Sort Algorithm"></a>The Selection Sort Algorithm</h2><p>Similar to a linear search, selection sort will first loop through the array, and look for the lowest value.</p>
<p>Once it has found the lowest value, it will swap this element with the element at index 0.</p>
<p>Now the first element is sorted.</p>
<p>Then the process repeats with the element at index 1.</p>
<p>Starting from this position, it will search for the lowest value in the rest of the array.</p>
<p>Once the lowest value has been found, this element is swapped with the element at index 1.</p>
<p>This process is repeated until the end of the array is reached, and all the elements are sorted.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ind <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ind <span class="token operator">=</span> j<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Binary Search]]></title>
      <url>/2018/03/21/ap_comp_sci_a_31/</url>
      <content type="html"><![CDATA[<h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><p>Linear search works well for arrays that are fairly small (a few hundred elements). as the array gets very large (millions or billions of elements), the efficiency of the search degrades.</p>
<p>If the array of elements is in sorted order, then there is a much better algorithm is binary search.</p>
<h2 id="The-Binary-Search-Algorithm"><a href="#The-Binary-Search-Algorithm" class="headerlink" title="The Binary Search Algorithm"></a>The Binary Search Algorithm</h2><p>Before a binary search can be performed, the data must be in sorted order.</p>
<p>The basic idea is to examine the element at the array’s midpoint on each pass through the search loop.</p>
<p>If the current element matches the target, we return its position. </p>
<p>If the current element is less than target, then we search the part of the array to the right of the midpoint (containing the positions of the greater elements).<br>Otherwise, if the current element is greater than the target, we search the part of the array to the left of the midpoint (containing the positions of the lesser elements).</p>
<p>On each pass through the loop, the current leftmost position or the current right most position is adjusted to track the position of the array being searched.</p>
<h2 id="Binary-Search-Algorithm-Analysis"><a href="#Binary-Search-Algorithm-Analysis" class="headerlink" title="Binary Search Algorithm Analysis"></a>Binary Search Algorithm Analysis</h2><p>Assume that n represents the size of the array to be searched.</p>
<p>Best case: the key is found in the first try.</p>
<p>Worst case: the key is not in the array or at either end of the subarray.</p>
<p>In the worst case, the n elements must be divided by 2 until there is just one element left, and then that element must be tested.</p>
<p>Therefore, in the worst case, the binary search algorithm takes log<sub>2</sub>n runtime.</p>
<p>For example, if the size of the array is 32, then the maximum number of comparisons is 5, since log<sub>2</sub>32=5.</p>
<p>Average case: takes about half the comparisons of the worst case.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> m<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                r <span class="token operator">=</span> m<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Linear Search]]></title>
      <url>/2018/03/19/ap_comp_sci_a_30/</url>
      <content type="html"><![CDATA[<h2 id="Linear-Search"><a href="#Linear-Search" class="headerlink" title="Linear Search"></a>Linear Search</h2><p>Often, programmers work with large amounts of data stored in arrays. It may be necessary to determine whether an array contains a value that matches a certain key value.</p>
<p>The process of locating a key value in an array is called searching.</p>
<p>The linear search algorithm begins searching at the beginning of an array. It compares the search key values (the value looking for) with the first item in the array.</p>
<p>If there is a match, then you stop the search. If there is not a match, then the second item in the array is examined.</p>
<p>The process is repeated until a match is found, or the end of the array is reached.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinearSearch</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Sometimes it is useful to know at which location in the array the element was found.</p>
<p>A return value of -1 indicates that the searched element is not in the array.</p>
<h2 id="Linear-Search-Algorithm-Analysis"><a href="#Linear-Search-Algorithm-Analysis" class="headerlink" title="Linear Search Algorithm Analysis"></a>Linear Search Algorithm Analysis</h2><p>Computer scientists talk about the efficiency of an algorithm in terms of its best, average and worst case.</p>
<p>The best case occurs when the data is organized in such a way that the algorithm works at its peak performance, or fastest.</p>
<p>The average case occurs when the data is organized in such a way that the algorithm works at its average speed.</p>
<p>The worst case occurs when the algorithm is least efficient or works at its slowest speed.</p>
<p>The worst case is often the one that people examine when analyzing an algorithm, because it gives you the best guaranteed performance of the algorithm.</p>
<p>Assume that n represents the size of the array to be searched.</p>
<p>The linear search algorithm has the following time efficiency:</p>
<p><strong>Best case</strong>: when the item to be searched is the first item in the array.</p>
<p><strong>Worst case</strong>: when the item to be searched is the last item in the array or it is not in the array.</p>
<p><strong>Average case</strong>: when the item to be searched is in a random location. The search makes on average n/2 comparisons before it locates the element.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Interfaces]]></title>
      <url>/2018/03/12/ap_comp_sci_a_29/</url>
      <content type="html"><![CDATA[<h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>An interface contains a collection of related abstract methods.</p>
<p>Any class that implements an interface must incorporate those abstract methods into its design.<br>Any interface is not a class.</p>
<p>Interfaces are somewhat similar to abstract classes in that they both contain abstract methods.</p>
<p>However, interfaces cannot contain any instance variables, constructors, or implemented methods. They can only contain abstract methods. </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"chews bone"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"eats fish"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To define an interface, you must use the keyword <code>interface</code>, followed by its given name.</p>
<p>The methods declared in an interface must be both public and abstract.</p>
<p>The <code>public</code> and <code>abstract</code> keywords are optional.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To implement an interface, a class must use the keyword <code>implements</code>.</p>
<p>Since interfaces are not classes, they cannot be instantiated.</p>
<p>Interfaces are used in Java to establish a common framework among related classes.</p>
<p>Implementing an interface allows a class to be more formal about the behavior it promises to provide. That is, it forms a contract between the class and the outside world.</p>
<p>If your class claims to implement an interface, all the methods defined in that interface must appear in your class.</p>
<h2 id="Multiple-Interfaces"><a href="#Multiple-Interfaces" class="headerlink" title="Multiple Interfaces"></a>Multiple Interfaces</h2><p>When using inheritance in Java, a subclass can only extend a single superclass.</p>
<p>This is called single inheritance. That is, multiple inheritance is not allowed.</p>
<p>Interfaces, however, are not classes. Therefore, the implementation of multiple interfaces is permitted.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Pet</span><span class="token punctuation">,</span> Security
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// implementation of class</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Abstract Classes]]></title>
      <url>/2018/03/07/ap_comp_sci_a_28/</url>
      <content type="html"><![CDATA[<h2 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h2><p>An abstract class can pass along methods and variables, but it can never be instantiated on its own. That is, we cannot create an object from an abstract class.<br>An abstract class contains one or more abstract methods.</p>
<p>The idea of an abstract method is to indicate the name and return type of a method, without providing the implementation of that method. Rather, the implementation is handled in the subclasses.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Note the semicolon after the method declaration.</p>
<p>A class is declared abstract by using the abstract keyword in the class header.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// instance variables</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token comment" spellcheck="true">// normal and abstract methods</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Any class that contains one or more abstract methods must be declared abstract.</p>
<p>However, a class that is declared abstract does not have to contain any abstract methods, and it can also contain regular methods.<br>The purpose of an abstract class is to act as a placeholder in a class hierarchy.</p>
<p>An abstract class may contain a partial description that is inherited by all of its descendants.</p>
<p>Its subclasses, which are more specific, fill the gaps.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Pet</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"woof"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"hiss"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>Abstract classes can also utilize polymorphism.</p>
<p>A superclass variable can store objects of its subclass.</p>
<p>However, a downcast is required to access the methods defined in the subclass, similar to regular classes.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Polymorphism]]></title>
      <url>/2018/03/06/ap_comp_sci_a_27/</url>
      <content type="html"><![CDATA[<h2 id="Method-Overloading"><a href="#Method-Overloading" class="headerlink" title="Method Overloading"></a>Method Overloading</h2><p>This is where more than one method in the same class has the same name, but different parameter lists.</p>
<h2 id="Superclass-references"><a href="#Superclass-references" class="headerlink" title="Superclass references"></a>Superclass references</h2><p>This is where the super keyword is used.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> name<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// mutator and accessor methods</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Downcastng"><a href="#Downcastng" class="headerlink" title="Downcastng"></a>Downcastng</h2><p>This is where we perform a required type cast on a reference, when using polymorphism.</p>
<p>Subclass objects can be stored in superclass variables. However, the methods of the subclass cannot be directed accessed when stored this way.</p>
<p>The object of the superclass type needs to be casted to the subclass to access the methods.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> name<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// mutator and accessor methods</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> String <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"woof"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Pet pet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pet<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// System.out.println(pet.bark()); not valid</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>pet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// valid if an Dog object is passed in</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Inheritance]]></title>
      <url>/2018/03/05/ap_comp_sci_a_26/</url>
      <content type="html"><![CDATA[<h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>This provides a unique form of code sharing by allowing you to take the implementation of any class and build a new class based on that implementation.</p>
<p>A subclass starts by inheriting all the public data and methods that are defined in the superclass.</p>
<p>The subclass can then extend its behavior by adding additional data and new methods.</p>
<p>The subclass can also extend or replace behavior in the superclass by overriding methods that were already implemented.</p>
<p>Inheritance implements the “is-a” relationship between objects.</p>
<p>Subclass “is a” Superclass.</p>
<p>E.g. Dog “is a” Pet.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// instance variables</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token comment" spellcheck="true">// mutator and accessor methods</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// instance variables</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token comment" spellcheck="true">// mutator and accessor methods</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Partial-Overriding"><a href="#Partial-Overriding" class="headerlink" title="Partial Overriding"></a>Partial Overriding</h2><p>Sometimes the code for overriding method includes call to the superclass method. This is called partial overriding.</p>
<p>Typically, this occurs when the subclass method wants to do what the superclass method does, plus something extra.</p>
<p>This is achieved by using the keyword <code>super</code> in the implementation.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> name<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// mutator and accessor methods</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Rules-for-Subclasses"><a href="#Rules-for-Subclasses" class="headerlink" title="Rules for Subclasses"></a>Rules for Subclasses</h2><p>A subclass can add new private instance variables.</p>
<p>A subclass can add new public or private methods.</p>
<p>A subclass can override (redefine) inherited methods.</p>
<p>A subclass must define its own constructors. Constructors are never inherited. Therefore, a subclass has to provide its own.</p>
<p>A subclass constructor can explicitly call a superclass constructor by using the keyword <code>super</code>. If <code>super</code> is used, then it must be the first statement in the subclass’s constructor.</p>
<p>A subclass cannot directly access the private members of its superclass.</p>
<p>A subclass should use the publicly declared accessor or mutator methods to access the instance variables of its superclass.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Python写一个Pixiv爬虫（二）]]></title>
      <url>/2017/12/15/pixiv_crawler_2/</url>
      <content type="html"><![CDATA[<p>完整程序详见<a href="https://github.com/leniumC/pixiv-crawler/" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="登录分析"><a href="#登录分析" class="headerlink" title="登录分析"></a>登录分析</h2><p>先打开Pixiv的<a href="https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index" target="_blank" rel="external">登录</a>页面，尝试登录并用开发者工具查看登录时发送的请求。</p>
<p>发现有一个名为<code>login?lang=zh</code>的请求，查看form data格式为</p>
<pre class=" language-python"><code class="language-python">pixiv_id<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 用户名</span>
password<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 密码</span>
captcha<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 验证码（空）</span>
g_recaptcha_response<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 验证码（空）</span>
post_key<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 名为post_key的字符串</span>
source<span class="token punctuation">:</span> pc
ref<span class="token punctuation">:</span> wwwtop_accounts_index
return_to<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>pixiv<span class="token punctuation">.</span>net<span class="token operator">/</span>
</code></pre>
<p>其中<code>source</code>, <code>ref</code>可在登录链接中找到，而<code>captcha</code>与<code>g_recaptcha_response</code>验证码并没有在请求中用到。猜想有用的数据只有<code>pixiv_id</code>, <code>password</code>, <code>post_key</code>三个。</p>
<p>显然<code>pixiv_id</code>与<code>password</code>分别为P站用户名与密码，而<code>post_key</code>每次登录时都是不同的，猜想存放在Cookie中或Html源码中。分别进行搜索，发现存放在一个名为<code>post_key</code>的<code>input</code>标签中。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_key<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p>获取用户输入的用户名与密码，然后再从Html中获取<code>post_key</code>的值，便可以正常登录了。</p>
<h2 id="登录实现"><a href="#登录实现" class="headerlink" title="登录实现"></a>登录实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>pixiv_id<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>
    base_url <span class="token operator">=</span> <span class="token string">'https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index'</span>
    login_url <span class="token operator">=</span> <span class="token string">'https://accounts.pixiv.net/api/login?lang=zh'</span>
    post_key_html <span class="token operator">=</span> se<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text
    post_key_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>post_key_html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>
    post_key <span class="token operator">=</span> post_key_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'pixiv_id'</span><span class="token punctuation">:</span> pixiv_id<span class="token punctuation">,</span>
        <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>
        <span class="token string">'post_key'</span><span class="token punctuation">:</span> post_key
    <span class="token punctuation">}</span>
    se<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</code></pre>
<p>首先定义登录页面网址与发送请求的网址。</p>
<pre class=" language-python"><code class="language-python">base_url <span class="token operator">=</span> <span class="token string">'https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index'</span>
login_url <span class="token operator">=</span> <span class="token string">'https://accounts.pixiv.net/api/login?lang=zh'</span>
</code></pre>
<p>首先通过Get请求获取登录页面Html源码<code>post_key_html</code>，然后使用BeautifulSoup对其进行解析，寻找Html中第一个<code>name</code>为<code>post_key</code>的<code>input</code>标签并获取其<code>value</code>属性。</p>
<pre class=" language-python"><code class="language-python">post_key_html <span class="token operator">=</span> se<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text
post_key_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>post_key_html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>
post_key <span class="token operator">=</span> post_key_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'post_key'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>
</code></pre>
<p>最后，用dictionary创建form data，并发送Post请求完成登录。</p>
<pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'pixiv_id'</span><span class="token punctuation">:</span> pixiv_id<span class="token punctuation">,</span>
    <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>
    <span class="token string">'post_key'</span><span class="token punctuation">:</span> post_key
<span class="token punctuation">}</span>
se<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Enhanced For Loop / Removing Items]]></title>
      <url>/2017/12/11/ap_comp_sci_a_25/</url>
      <content type="html"><![CDATA[<h2 id="Enhanced-For-Loop"><a href="#Enhanced-For-Loop" class="headerlink" title="Enhanced For Loop"></a>Enhanced For Loop</h2><p>There is a convenient shortcut for iterating through a sequence of elements, such as an array or an ArrayList.</p>
<p>It is called the enhanced for loop, or for-each loop.</p>
<p>Suppose you want to total up all the values in an array named <code>data</code>.</p>
<p>If you use a regular for loop:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token number">4.2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>If you use an enhanced for loop:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token number">4.2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> item<span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The loop body is executed for each element in the array <code>data</code>.</p>
<p>At the beginning of each loop iteration, the next element is assigned to the variable <code>item</code>.</p>
<p>Then, the loop body is executed. You can read this loop as, “for each item in data”.</p>
<p>Note an important difference between the for-each loop and the regular for loop.</p>
<p>In the for-each loop, the element varible <code>item</code> is assigned values <code>data[0], data[1]</code> and so on. In the regular for loop, the index variable <code>i</code> is assigned values <code>0, 1</code> and so on.</p>
<h2 id="Looping-Through-an-ArrayList-and-Removing-Multiple-Items"><a href="#Looping-Through-an-ArrayList-and-Removing-Multiple-Items" class="headerlink" title="Looping Through an ArrayList and Removing Multiple Items."></a>Looping Through an ArrayList and Removing Multiple Items.</h2><p>Removing single items, or items that are not neighbours, from an ArrayList, is simple.</p>
<p>However, care must be taken when removing two items that are adjacent to each other in an ArrayList.</p>
<p>Consider the following example in which we attempt to remove all of the even numbers from ArrayList.</p>
<pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nums<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Expected: 9, 3, 5, 1</span>
<span class="token comment" spellcheck="true">// Result: 9, 3, 5, 6, 8, 1</span>
</code></pre>
<p>This problem can be solved quite easily by iterating backwards instead.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Wrapper Classes]]></title>
      <url>/2017/12/07/ap_comp_sci_a_24/</url>
      <content type="html"><![CDATA[<h2 id="Wrapper-Classes"><a href="#Wrapper-Classes" class="headerlink" title="Wrapper Classes"></a>Wrapper Classes</h2><p>Unlike an array, and ArrayList can only contain objects, not primitive data types.</p>
<p>Since numbers are primitive data types in Java, you cannot directly insert them into an ArrayList.</p>
<p>You must convert them into objects by using wrapper classes.</p>
<ul>
<li>int -&gt; Integer</li>
<li>double -&gt; Double</li>
</ul>
<p>Note that the wrapper class names start with uppercase letters.</p>
<p>Each wrapper class object contains a value of the corresponding primitive type.</p>
<p>For example, you can create an object of the wrapper class <code>Double</code> with the following code:</p>
<pre class=" language-java"><code class="language-java">Double num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">29.95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The object that gets created contains a value of type double.</p>
<p>Wrapper objects can be used with anywhere objects are required, instead of primitive type values.</p>
<h2 id="Auto-boxing"><a href="#Auto-boxing" class="headerlink" title="Auto-boxing"></a>Auto-boxing</h2><p>Conversion between primitive types and the corresponding wrapper classes is automatic.</p>
<p>This process is called auto-boxing.</p>
<p>For example, if you assign a number to a <code>Double</code> object, that number is automatically “put into a box”, namely, a wrapper object.</p>
<pre class=" language-java"><code class="language-java">Double num <span class="token operator">=</span> <span class="token number">29.95</span><span class="token punctuation">;</span>
</code></pre>
<p>Wrapper objects are automatically “unboxed”:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> val <span class="token operator">=</span> num<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// val is 29.95</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: ArrayList Methods]]></title>
      <url>/2017/12/05/ap_comp_sci_a_23/</url>
      <content type="html"><![CDATA[<h2 id="add-Method"><a href="#add-Method" class="headerlink" title="add() Method"></a><code>add()</code> Method</h2><p>ArrayList provides two methods for adding elements to the list, both of which are named <code>add()</code>.</p>
<p>The first <code>add()</code> method works like an append, by adding the element to the end of the list.</p>
<p>This method takes on parameter.</p>
<pre class=" language-java"><code class="language-java">words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"coffee"</span><span class="token punctuation">)</span>
</code></pre>
<p>The second <code>add()</code> method takes two parameters, and works like an insert.</p>
<p>The first parameter represents the location in the list where the element is to be inserted.</p>
<p>Starting at the given index position, all elements below this position are pushed down by one.</p>
<pre class=" language-java"><code class="language-java">words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"milk"</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="get-Method"><a href="#get-Method" class="headerlink" title="get() Method"></a><code>get()</code> Method</h2><p>The <code>get()</code> method works like the array’s index operator []. It takes one parameter, which is the index of the element to be returned.</p>
<pre class=" language-java"><code class="language-java">String word <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="remove-Method"><a href="#remove-Method" class="headerlink" title="remove() Method"></a><code>remove()</code> Method</h2><p>The <code>remove()</code> method takes one parameter, which is the index of the element to be removed.</p>
<p>Starting at the given index position, all elements below this position are moved up by one. This method also returns the deleted item.</p>
<pre class=" language-java"><code class="language-java">String deletedWord <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// or simply</span>
words<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="set-Method"><a href="#set-Method" class="headerlink" title="set() Method"></a><code>set()</code> Method</h2><p>The <code>set()</code> method replaces an element at a given position. This method takes two parameters. The first parameter is the index of the element to be replaced, and the second parameter is the element’s new value.</p>
<p>This method returns the old element.</p>
<pre class=" language-java"><code class="language-java">String oldWord <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"coke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// or simply</span>
words<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"coke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="size-Method"><a href="#size-Method" class="headerlink" title="size() Method"></a><code>size()</code> Method</h2><p>The <code>size()</code> method returns the number of elements which are currently in the ArrayList.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> wordCount <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="isEmpty-Method"><a href="#isEmpty-Method" class="headerlink" title="isEmpty() Method"></a><code>isEmpty()</code> Method</h2><p>The <code>isEmpty()</code> method returns true if the ArrayList contains no elements and false otherwise.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> b <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: ArrayList Basics]]></title>
      <url>/2017/12/04/ap_comp_sci_a_22/</url>
      <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>As we have seen, the array is a very powerful data structure that has many uses.</p>
<p>However, arrays are assigned a fixed size when they are created, and this size cannot be changed.</p>
<p>Java provides a data structure called an ArrayList that is very similar to an array, except that it can be easily resized while your program is running.</p>
<p>Since an ArrayList can grow and shrink while your program runs, it is a more efficient use of memory, and it is also simpler to use.</p>
<p>Note that a programmer must use methods (add, get, etc.) rather than the square bracket notation [] to manipulate elements in an ArrayList.</p>
<h2 id="Declaring-and-Instantiating-an-ArrayList"><a href="#Declaring-and-Instantiating-an-ArrayList" class="headerlink" title="Declaring and Instantiating an ArrayList"></a>Declaring and Instantiating an ArrayList</h2><p>The ArrayList is part of a separate Java library, so you must provide the following import statement at the beginning of your program:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
</code></pre>
<p>To declare an ArrayList:</p>
<pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Since ArrayList is a class, you must use the <code>new</code> operator, followed by a constructor call to instantiate an ArrayList object.</p>
<p>Note the use of the angle brackets in <code>&lt;String&gt;</code>. This is called generics in Java, and they are used to specify the data type.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Passing by Value / Passing by Reference]]></title>
      <url>/2017/11/24/ap_comp_sci_a_21/</url>
      <content type="html"><![CDATA[<h2 id="Passing-Parameters-of-Primitive-Types"><a href="#Passing-Parameters-of-Primitive-Types" class="headerlink" title="Passing Parameters of Primitive Types"></a>Passing Parameters of Primitive Types</h2><p>When a method has a primitive type as a parameter, Java passes that parameter using a technique called pass-by-value.</p>
<p>A method that is passed a parameter of a primitive type is passed a copy of that parameter’s value.</p>
<p>This means that the calling method has no access to the parameter itself.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 5</span>
    <span class="token function">changeValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// still prints 5</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Passing-Parameters-of-Objects"><a href="#Passing-Parameters-of-Objects" class="headerlink" title="Passing Parameters of Objects"></a>Passing Parameters of Objects</h2><p>When an object is passed as a parameter to a method, the value stored, which is the memory location of the object, is passed. This is usually referred to as pass-by-reference.</p>
<p>No copy of the object itself is made, instead, the variable in the method points to the object.</p>
<p>This means when the method accesses the object passed to it, it is directly accessing the object itself.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeName</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Tony"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "Bob"</span>
    <span class="token function">changeName</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints "Tony" instead</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Passing-an-Array-as-a-Parameter"><a href="#Passing-an-Array-as-a-Parameter" class="headerlink" title="Passing an Array as a Parameter"></a>Passing an Array as a Parameter</h2><p>Arrays are objects, and they can be passed as parameters to other methods.</p>
<p>This means that arrays are passed using the mechanism pass-by-reference.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 10</span>
    <span class="token function">changeNum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prints 500 instead</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: References and Arrays of Objects]]></title>
      <url>/2017/11/21/ap_comp_sci_a_20/</url>
      <content type="html"><![CDATA[<h2 id="The-Die-Class"><a href="#The-Die-Class" class="headerlink" title="The Die Class"></a>The <code>Die</code> Class</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Die</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// instance variables</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> faceValue<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token keyword">public</span> <span class="token function">Die</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        faceValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// methods</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        faceValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFaceValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> faceValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Object-References"><a href="#Object-References" class="headerlink" title="Object References"></a>Object References</h2><pre class=" language-java"><code class="language-java">Die cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Consider what happens in Java’s memory when the object reference <code>cube</code> is created.</p>
<p><code>cube</code> is assigned a six-digit hexadecimal number. This number corresponds to a specific location in Java’s memory banks. The object reference called <code>cube</code> points to that location.</p>
<p>In other words, <code>cube</code> only contains a memory location address, not the object itself.</p>
<h2 id="Arrays-of-Objects"><a href="#Arrays-of-Objects" class="headerlink" title="Arrays of Objects"></a>Arrays of Objects</h2><p>You have already seen how arrays can be used to store primitive types:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>Arrays can also be used to store objects of classes that you define.</p>
<pre class=" language-java"><code class="language-java">Die dice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Die</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>The constructor starts by initializing the array of length 5, and it assigns its reference (memory location) to the variable dice.</p>
<p>The array elements do not contain Die object yet, so they are assigned a value of <code>null</code>. The keyword <code>null</code> is the default value for an object variable that does not contain an object.</p>
<p>Next, the constructor instantiates (creates) 5 Die objects and stores their references (memory location) in the array. Each Die object occupies a different array index.</p>
<h2 id="Iterating-Over-Arrays"><a href="#Iterating-Over-Arrays" class="headerlink" title="Iterating Over Arrays"></a>Iterating Over Arrays</h2><p>This uses a for loop to access each Die object in the array.</p>
<p>In the for loop, an array is index is used to retrieve each Die object’s reference and store it in the local variable <code>cube</code>.</p>
<p>Then the <code>roll()</code> method is called on the reference value stored in the Die object <code>cube</code>.</p>
<p>The <code>roll()</code> method assigns an random value to the <code>faceValue</code> variable of that object.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Python写一个Pixiv爬虫（一）]]></title>
      <url>/2017/11/16/pixiv_crawler_1/</url>
      <content type="html"><![CDATA[<p>完整程序详见<a href="https://github.com/leniumC/pixiv-crawler/" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>很久以前的一个想法…大概就是想做一个可以用来爬Pixiv图片的爬虫，主要功能是可以按图片的收藏数量来筛选图片。</p>
<p>毕竟Pixiv不开通会员找高质量图片还是比较麻烦的，也方便之后自己做机器学习项目爬图片用。</p>
<p>于是乎在这里简单记录一下过程…</p>
<h2 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h2><ul>
<li>Requests</li>
<li>BeautifulSoup 4</li>
</ul>
<p>Request可以用于发送大部分请求，BeautifulSoup用于从html文件中提取图片网址与有用信息。</p>
<pre class=" language-bash"><code class="language-bash">pip3 <span class="token function">install</span> requests
pip3 <span class="token function">install</span> beautifulsoup4
</code></pre>
<p>如需使用Sock5代理（Shadowsocks等），则需要执行</p>
<pre class=" language-bash"><code class="language-bash">pip3 <span class="token function">install</span> requests<span class="token punctuation">[</span>socks5<span class="token punctuation">]</span>
</code></pre>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json
<span class="token keyword">import</span> time
<span class="token keyword">import</span> os
<span class="token keyword">import</span> shutil
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
</code></pre>
<h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><pre class=" language-python"><code class="language-python">raw_keyword <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Enter search keyword: '</span><span class="token punctuation">)</span>
search_keyword <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>raw_keyword<span class="token punctuation">)</span>
</code></pre>
<p>其中<code>raw_keyword</code>为以空格分隔的搜索关键词，而<code>search_keyword</code>为经过url encode之后的关键词。</p>
<pre class=" language-python"><code class="language-python">start_page <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input<span class="token punctuation">(</span><span class="token string">'Enter start page: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
end_page <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input<span class="token punctuation">(</span><span class="token string">'Enter end page: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre>
<p>在Pixiv上获取图片时，<code>start_page</code>为所爬网页的起始页码，<code>end_page</code>为终止页码。</p>
<pre class=" language-python"><code class="language-python">bookmark_thresh <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> input<span class="token punctuation">(</span><span class="token string">'Enter least number of bookmarks accepted: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
multi_images <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Accept multiple images (manga)? (y/n): '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

pixiv_id <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Enter pixiv id or email: '</span><span class="token punctuation">)</span>
password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Enter pixiv password: '</span><span class="token punctuation">)</span>
</code></pre>
<p>其余的变量分别储存了收藏数量的阈值、是否下载多图（漫画）内容、Pixiv ID或Email以及Pixiv密码。</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>虽然使用全局变量似乎并不是很好的编程习惯…</p>
<pre class=" language-python"><code class="language-python">se <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index'</span><span class="token punctuation">,</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"</span>
<span class="token punctuation">}</span>
proxies <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'socks5h://127.0.0.1:1080'</span><span class="token punctuation">,</span>
    <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'socks5h://127.0.0.1:1080'</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>se</code>为创建的一个requests session，之后的请求均会通过它发送，主要原因是同一个session中是会储存cookie的，所以才能实现登录之后爬取图片的操作。</p>
<p><code>headers</code>就是发请求的时候的request header，<code>Referer</code>是在登录的时候和获取图片的时候网站都会检查的，之后会进行修改。<code>User-Agent</code>就是之前说的随机生成的fake-useragent。</p>
<p><code>proxies</code>为可选项，如需使用代理则需要在之后所有的请求中加上<code>proxies=proxies</code>。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Class Methods]]></title>
      <url>/2017/11/15/ap_comp_sci_a_19/</url>
      <content type="html"><![CDATA[<h2 id="Accessor-Methods"><a href="#Accessor-Methods" class="headerlink" title="Accessor Methods"></a>Accessor Methods</h2><p>Instance variables should be declared as private.</p>
<p>By declaring the instance variables as private, client programs that create objects from the class are not allowed to access the instance variables directly using the dot operator.</p>
<p>However, client programs often need the ability to see the contents of the instance variables of an object. For this reason, classes are often designed with a special type of method called an accessor method.</p>
<p>Accessor methods are methods defined in a class which allow clients to observe instance variables, but not modify them.</p>
<p>Accessor methods are declared with a return type that corresponds to the data type of the instance variable being accessed.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This method, when called, will return the value of the <code>name</code> instance variable.</p>
<h2 id="Mutator-Methods"><a href="#Mutator-Methods" class="headerlink" title="Mutator Methods"></a>Mutator Methods</h2><p>Methods in a class that allow clients to modify an object’s instance variables are called mutator methods.</p>
<p>If the instance variables of a class are declared private, then clients who instantiate (create) objects of this class do not have direct access to its instance variables.</p>
<p>If you wish clients to have the ability to change the value of a particular instance variable, then you must provide a mutator method.</p>
<p>Mutator methods are usually defined with a return type of void, since they usually do not return a value.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String studentName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> studentName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This method, when called, will change the value of the <code>name</code> instance variable to the value specified by the parameter <code>studentName</code>.</p>
<h2 id="The-toString-Method"><a href="#The-toString-Method" class="headerlink" title="The toString() Method"></a>The <code>toString()</code> Method</h2><p>The purpose of the <code>toString()</code> method is to provide client programs with a easy way to print the contents of the instance variables of a class.</p>
<p>It can also be used to display other information within an object, such as the results of method calls.</p>
<p>The <code>toString()</code> method of an object is activated by enclosing the object name within a <code>println()</code> statement.</p>
<pre class=" language-java"><code class="language-java">Student bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bob<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Any class can include a <code>toString()</code> method in its implementation. The method must use the following format:</p>
<pre class=" language-java"><code class="language-java">Public String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// do something and return a String</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Within the body of the <code>toString()</code>, a String is defined and returned to the <code>println()</code> method of the client program.</p>
<p>The String is often build using a series of concatenation operators (+), so the String can include more than one variable.</p>
<p>Labels are often included within the String to make the output more clear.</p>
<p>The escape sequence <code>\n</code> is also used to embed newline characters within the String, so that the output can be displayed on multiple lines.</p>
<pre class=" language-java"><code class="language-java">Public String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    result <span class="token operator">+=</span> <span class="token string">"name: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    result <span class="token operator">+=</span> <span class="token string">"Age: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Instance Variables / Constructors]]></title>
      <url>/2017/11/08/ap_comp_sci_a_18/</url>
      <content type="html"><![CDATA[<h2 id="Instance-Variables"><a href="#Instance-Variables" class="headerlink" title="Instance Variables"></a>Instance Variables</h2><p>There are variables that describe the state of an object, also known as attributes.</p>
<p>They are always declared private.</p>
<p>You can use them in any method in the class.</p>
<p>Don’t initiate them because they are always automatically assigned default values.</p>
<ul>
<li>int: 0</li>
<li>double: 0.0</li>
<li>boolean: false</li>
<li>object references: null</li>
</ul>
<h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>A constructor is a special method within a class that has the same name as the class.</p>
<p>The primary purpose of a constructor is to assign initial values to a class’ instance variables.</p>
<p>When defining a constructor, you do not specify a return type.</p>
<p>A constructor with no parameters is called the default constructor.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">"anonymous"</span><span class="token punctuation">;</span>
    age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Multiple-Constructors"><a href="#Multiple-Constructors" class="headerlink" title="Multiple Constructors"></a>Multiple Constructors</h2><p>A class can have more than one constructor. Providing multiple constructors makes a class more flexible and easy to use.</p>
<p>When using multiple constructors, the parameter list of each constructor within a class must be unique.</p>
<p>Parameter lists must differ by either the number of parameters defined or the parameter type.</p>
<p>Constructors are invoked or called when you “construct” an object using the keyword <code>new</code>.</p>
<p><strong>Note</strong>: If a class contains no constructors, Java will automatically provide a default constructor for the class</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// instance variables</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">"anonymous"</span><span class="token punctuation">;</span>
        age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String studentName<span class="token punctuation">,</span> <span class="token keyword">int</span> studentAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> studentName<span class="token punctuation">;</span>
        age <span class="token operator">=</span> studentAge<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Student defaultStudent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Student bob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Object Oriented Programming]]></title>
      <url>/2017/11/07/ap_comp_sci_a_17/</url>
      <content type="html"><![CDATA[<h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object Oriented Programming"></a>Object Oriented Programming</h2><p>As programming problems become more complex, programmers look for better ways to store them.</p>
<p>We can divide a programming problem into multiple classes, where each class has a specific task to perform in solving the problem.</p>
<p>A class is a description, model, or blueprint from which an object is created.</p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>A class describes 2 characteristics of an object:</p>
<ul>
<li>It describes what data an object stores, known as an object’s attributes. These are defined through the instance variables.</li>
<li>It describes what an object does, known as an object’s behaviors. These are defined through the methods.</li>
</ul>
<p>The process of combining state and behavior into a single class is called encapsulation.</p>
<h2 id="Defining-a-Class"><a href="#Defining-a-Class" class="headerlink" title="Defining a Class"></a>Defining a Class</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Die</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// instance variables</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> faceValue<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// constructors</span>
    <span class="token keyword">public</span> <span class="token function">Die</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        faceValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// methods</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        faceValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFaceValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> faceValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Using-a-Class"><a href="#Using-a-Class" class="headerlink" title="Using a Class"></a>Using a Class</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DieTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Die die <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        die<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> die<span class="token punctuation">.</span><span class="token function">getFaceValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning Week 3: Classification and Regularization]]></title>
      <url>/2017/10/31/machine_learning_week_3/</url>
      <content type="html"><![CDATA[<p>Resources from <a href="https://www.coursera.org/learn/machine-learning/" target="_blank" rel="external">Coursera</a>.</p>
<p>The third week of the machine learning course. (Haven’t updated this for quite a long time.) After introducing regression problems in the last week, this week is mainly about classification problems. Also, using regularization to prevent overfitting is also talked about briefly.</p>
<h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><p>In a classification problem, we want our results to be a number within the range [0, 1], representing the probability that a input belongs to a category, in the most basic case, either category 0 or 1. To achieve this, we take our hypothesis function <span>$h(x) = \theta^T x$</span><!-- Has MathJax --> and plug it into the sigmoid function, or logistic function, <span>$g(z) = \frac{1}{1 + e^{-z}}$</span><!-- Has MathJax -->, which has a function graph that looks like this.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/sigmoid.png" width="500"></p>
<p>If the output of the sigmoid function is greater than 0.5, then the category is considered to be 1; otherwise, it is considered to be 0.</p>
<h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><p>The cost function for classification problems is different from that of regression problems. This is because the cost function has to be chosen so that it is concave in order to prevent the gradient descent from getting stuck in local minimums.</p>
<p>The cost function is as follows:<br><span>$J(\theta) = \frac{1}{m} \displaystyle \sum _{i=1}^m Cost(h_\theta (x_{i}), y_{i})$</span><!-- Has MathJax --><br><span>$Cost(h_\theta (x), y) = -\log{(h_\theta (x))}$</span><!-- Has MathJax --> , if <span>$y = 1$</span><!-- Has MathJax --><br><span>$Cost(h_\theta (x), y) = -\log{(1 - h_\theta (x))}$</span><!-- Has MathJax --> , if <span>$y = 0$</span><!-- Has MathJax --></p>
<p>And when combined:<br><span>$J(\theta) = \frac{1}{m} \displaystyle \sum _{i=1}^m (-y_{i} \log{(h_\theta (x_{i}))} - (1 - y_{i}) \log{(1 - h_\theta (x_{i}))}$</span><!-- Has MathJax --></p>
<p>Notice that the second term will be zero if <em>y</em> is equal to 1, and the first term will be zero if <em>y</em> is equal to 0.</p>
<p>It is also worth metioning that, although regression problems and classification problems have different cost functions, their update functions when doing gradient descent are exactly the same.</p>
<h2 id="Multiclass-Classification"><a href="#Multiclass-Classification" class="headerlink" title="Multiclass Classification"></a>Multiclass Classification</h2><p>When we have to classify data into multiple classes, we simply create a hypothesis function for each class, and calculate each time the probability that an input belongs to that specific class.</p>
<p>The gradient descent process is done for all the hypothesis functions, and when using the model, the class whose hypothesis function results in the highest probability will be determined as the class for the input.</p>
<h2 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h2><p>In order to prevent the model from overfitting, there are mainly two ways that are quite useful.</p>
<p>The first way is to reduce the number of features by choosing which features to keep and which to drop, or other less complex models can be used.</p>
<p>The second way is to use regularization. This is a simple way that reduces the magnitudes of the parameters. When using regularization, there will be an additional function in the cost function.</p>
<span>$J(\theta) = \frac{1}{m} \displaystyle \sum _{i=1}^m Cost(h_\theta (x_{i}), y_{i}) + \lambda \sum _{j=1}^n \theta_{j}^{2}$</span><!-- Has MathJax -->
<p>The <span>$\lambda$</span><!-- Has MathJax --> in the equation is called the regularization parameter. This parameter is used to adjust “how much” the model takes into account the magnitudes of the parameters.</p>
<h2 id="Normal-Equation-with-Regularization"><a href="#Normal-Equation-with-Regularization" class="headerlink" title="Normal Equation with Regularization"></a>Normal Equation with Regularization</h2><p>It is also possible to fit the model using the normal equation when using regularization. Note that there is an additional term in the normal equation.</p>
<span>$\theta = (X^T X + \lambda L)^{-1} X^T y$</span><!-- Has MathJax -->
<p>where L is an identity matrix with one more row / column than the number of parameters (representing the constant <span>$\theta_{0}$</span><!-- Has MathJax -->), except that the first element in the identity matrix is 0 (because <span>$\theta_{0}$</span><!-- Has MathJax --> is not regularized).</p>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Supervised Learning </tag>
            
            <tag> Classification </tag>
            
            <tag> Regularization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: 2-D Arrays]]></title>
      <url>/2017/10/30/ap_comp_sci_a_16/</url>
      <content type="html"><![CDATA[<h2 id="Two-Dimensional-Arrays"><a href="#Two-Dimensional-Arrays" class="headerlink" title="Two-Dimensional Arrays"></a>Two-Dimensional Arrays</h2><p>Suppose I declare an array, and instead of filling the cells with integers or strings, I place an array in each cell.</p>
<p>Essentially, I have created an array of arrays, also known as a two-dimensional array.</p>
<p>In Java, two-dimensional arrays can be defined using the following notation:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span>columns<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<p>Specifically, it is easier to think of a two-dimensional array as a table or grid with rows or columns.</p>
<table>
<thead>
<tr>
<th>\</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>1</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>x</td>
<td>.</td>
</tr>
<tr>
<td>2</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
<td>.</td>
</tr>
</tbody>
</table>
<p>The first index declares the number of rows. The second index declares the number of columns.<br>For example, location [1][3] would be 2 rows down and 4 columns across.</p>
<p><strong>Remember</strong>: all the elements of a two-dimensional array must be of the same data type.</p>
<h2 id="Size-of-2-D-Arrays"><a href="#Size-of-2-D-Arrays" class="headerlink" title="Size of 2-D Arrays"></a>Size of 2-D Arrays</h2><p>You can get the number of rows that a 2-D array contains by using the variable <code>table.length</code>.<br>You can get the number of columns that a 2-D array contains by using the variable <code>table[0].length</code>.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
rows <span class="token operator">=</span> table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// rows is 3</span>
columns <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// columns is 5</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Arrays II]]></title>
      <url>/2017/10/24/ap_comp_sci_a_15/</url>
      <content type="html"><![CDATA[<h2 id="Array-Initializer-List"><a href="#Array-Initializer-List" class="headerlink" title="Array Initializer List"></a>Array Initializer List</h2><p>As a shortcut, an initializer list allows you to declare an array and assign values to each of its elements in a single statement.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>If you attempt to index an element of an array that does not exist, Java will return an <code>IndexOutOfBounds</code> exception.</p>
<h2 id="Iterating-Through-an-Array-Traversing"><a href="#Iterating-Through-an-Array-Traversing" class="headerlink" title="Iterating Through an Array (Traversing)"></a>Iterating Through an Array (Traversing)</h2><p>Suppose we want to create an integer array of size 20, and fill each element of the array with a random number in the range 0 to 99.</p>
<p>It would be inefficient to assign the random values to each element of the array.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// .</span>
<span class="token comment" spellcheck="true">// .</span>
<span class="token comment" spellcheck="true">// .</span>
nums<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>A much better approach would be to use a for loop to iterate through all the elements of the array.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>We can also use a for loop to output the contents of an array.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Array-Length"><a href="#Array-Length" class="headerlink" title="Array Length"></a>Array Length</h2><p>Java allows you to access the size of an array using length, a data member of the array object.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> arraySize <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arraySize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// prints 20</span>
</code></pre>
<p>Note that there are no parentheses after <code>length</code> because <code>length</code> is an member variable of <code>nums</code> instead of a method.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Arrays I]]></title>
      <url>/2017/10/23/ap_comp_sci_a_14/</url>
      <content type="html"><![CDATA[<h2 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h2><p>A data structure is a group of data elements combined together under one name.</p>
<p>Data structures are used for storing and organizing data so that it can be used efficiently.</p>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>An array is a data structure that stores a collection of individual values that are of the same data type.</p>
<h2 id="Declaring-an-Array"><a href="#Declaring-an-Array" class="headerlink" title="Declaring an Array"></a>Declaring an Array</h2><p>To declare an array variable, you must include square brackets [] between the data type and the variable name.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">;</span>
</code></pre>
<h2 id="Defining-an-Array"><a href="#Defining-an-Array" class="headerlink" title="Defining an Array"></a>Defining an Array</h2><p>To create the array itself, we must specify its data type and how many elements it is to contain (its size).</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="Accessing-Array-Elements"><a href="#Accessing-Array-Elements" class="headerlink" title="Accessing Array Elements"></a>Accessing Array Elements</h2><p>To access the individual elements of an array, you must use the array variable’s name, followed by the number of the element enclosed in square brackets. This number is referred to as an index.</p>
<p>Note that the index starts from 0 instead of 1.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// right</span>

numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// wrong</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Random Numbers]]></title>
      <url>/2017/10/20/ap_comp_sci_a_13/</url>
      <content type="html"><![CDATA[<h2 id="The-Math-random-Method"><a href="#The-Math-random-Method" class="headerlink" title="The Math.random() Method"></a>The <code>Math.random()</code> Method</h2><p>Java’s random number generator returns numbers chosen at random for a particular set interval.</p>
<p>The <code>Math.random()</code> method creates a random double value which is greater than or equal to 0.0, and less than 1.0.</p>
<p>This range can be modified through type casting, multiplication and addition.</p>
<p>If you multiply Math.random() by an integer x, the range of the random number will change to 0.0 &lt;= n &lt; x.</p>
<p>If you add an integer to Math.random(), the range of the random number will be shifted by that amount.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 0.0 &lt;= a &lt; 10.0</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 10.0 &lt;= b &lt; 11.0</span>
</code></pre>
<h2 id="Creating-random-integers"><a href="#Creating-random-integers" class="headerlink" title="Creating random integers"></a>Creating random integers</h2><p>This statement produces a random integer in the range p &lt;= n &lt;= p + k - 1.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// p &lt;= n &lt;= p + k - 1.</span>
</code></pre>
<p>Thus, if the desired range is a &lt;= n &lt;= b, use this equation.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// a &lt;= n &lt;= b</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Math]]></title>
      <url>/2017/10/19/ap_comp_sci_a_12/</url>
      <content type="html"><![CDATA[<h2 id="The-Math-Class"><a href="#The-Math-Class" class="headerlink" title="The Math Class"></a>The Math Class</h2><p>This is a Java standard class which provides a range of common mathematical methods.</p>
<table>
<thead>
<tr>
<th>method</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>int abs(int x)</td>
<td>returns the absolute value</td>
</tr>
<tr>
<td>double abs(double x)</td>
<td>returns the absolute value</td>
</tr>
<tr>
<td>int max(int a, int b)</td>
<td>returns the greater of a and b</td>
</tr>
<tr>
<td>int max(int a, int b)</td>
<td>returns the lesser of a and b</td>
</tr>
<tr>
<td>double pow(double base, double exponent)</td>
<td>returns the base raised to the power of the exponent</td>
</tr>
<tr>
<td>double random()</td>
<td>returns a double numerical value, with a positive sign, greater or equal to 0.0, and less than 1.0</td>
</tr>
<tr>
<td>double sqrt(double x)</td>
<td>returns the square root of x</td>
</tr>
</tbody>
</table>
<p>The data type in front of the method name indicates the type of data that is returned by the calculation.</p>
<p>All these methods are declared as static, so you must use the name of the class when evoking them: <code>Math</code>.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// a is 10</span>

<span class="token comment" spellcheck="true">// a = abs(b)</span>
<span class="token comment" spellcheck="true">// this won't work</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Parameter]]></title>
      <url>/2017/10/18/ap_comp_sci_a_11/</url>
      <content type="html"><![CDATA[<h2 id="Writing-a-Method-with-Parameters"><a href="#Writing-a-Method-with-Parameters" class="headerlink" title="Writing a Method with Parameters"></a>Writing a Method with Parameters</h2><p>To add parameters to your method definitions, you simply declare one or more variables in the parentheses that follow the method name.</p>
<p>These variable declarations need to include a data type and an identifier name.</p>
<p>A parameter is a special kind of variable that can only be used within your declared method.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span>String param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// prints param</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Parameter-Scope"><a href="#Parameter-Scope" class="headerlink" title="Parameter Scope"></a>Parameter Scope</h2><p>The parameter can’t be used outside its body.</p>
<p>The scope of a parameter is limited to the method that it is declared in.</p>
<p>In other words, we can’t use parameters outside their declared method.</p>
<h2 id="Parameters-and-Arguments"><a href="#Parameters-and-Arguments" class="headerlink" title="Parameters and Arguments"></a>Parameters and Arguments</h2><p>Note that parameters are the variables that you declare when you define a method while arguments are the data you pass into the method when calling it.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span>String param<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// parameter</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  String arg <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
  <span class="token function">function</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// argument</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Methods II]]></title>
      <url>/2017/10/17/ap_comp_sci_a_10/</url>
      <content type="html"><![CDATA[<h2 id="Non-Void-Method-Return"><a href="#Non-Void-Method-Return" class="headerlink" title="Non-Void Method Return"></a>Non-Void Method Return</h2><p>A non-void method’s return value can be just about anything, as long as the return keyword matches the return type.</p>
<p>A method can return a literal value.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// "hello world"</span>
</code></pre>
<p>A method can return the contents of a variable.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 100</span>
</code></pre>
<p>A method can return the result of a mathematical expression.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>A method can return the result of a boolean expression.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// true</span>
</code></pre>
<h2 id="Calling-Non-Void-Methods"><a href="#Calling-Non-Void-Methods" class="headerlink" title="Calling Non-Void Methods"></a>Calling Non-Void Methods</h2><p>Non-void methods always returns a value, then this value has to be stored in a variable, printed, or passed to a Java control structure.</p>
<p>A method call can be in an assignment statement.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>A method call can be in a <code>println</code> statement.</p>
<pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>A method call can be inside a Java control structure such as an if statement or a looping structure.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// do something</span>
<span class="token punctuation">}</span>
</code></pre>
<p>A method call can be inside the return statement of another method.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h2><p>An argument is a value that is passed to a method so that the method can use that value in its processing.</p>
<p>An argument is located inside the parentheses that follow a method name.</p>
<p>A method can have 0, 1, or more arguments. Multiple arguments are separated by commas.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Methods I]]></title>
      <url>/2017/10/16/ap_comp_sci_a_9/</url>
      <content type="html"><![CDATA[<h2 id="Method-Types"><a href="#Method-Types" class="headerlink" title="Method Types"></a>Method Types</h2><p>A method is simply a block of code that is given a name.</p>
<p>In Java, there are two types of methods that you can write. These methods are identified by the task they perform.</p>
<p><strong>Void methods</strong>: These are methods that do not give you anything back. They have no return statement.</p>
<p><strong>Non-void methods</strong>: These are methods that give you something back. They must have a return statement.</p>
<h2 id="Void-Methods"><a href="#Void-Methods" class="headerlink" title="Void Methods"></a>Void Methods</h2><p>To execute or call a void method, you write the method name, along with open and closed parentheses.</p>
<p>Note that a void method is called as a single statement on a line by itself.</p>
<h2 id="Non-Void-Methods"><a href="#Non-Void-Methods" class="headerlink" title="Non-Void Methods"></a>Non-Void Methods</h2><p>Non-void methods differ from void methods in that they give something back.</p>
<p>What they give back is dependent upon the return type.</p>
<p>The return type declares what the method is going to give back, or return.</p>
<p>The keyword return is required in all non-void methods.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Strings]]></title>
      <url>/2017/10/13/ap_comp_sci_a_8/</url>
      <content type="html"><![CDATA[<h2 id="Java-Strings"><a href="#Java-Strings" class="headerlink" title="Java Strings"></a>Java Strings</h2><p>Java does not have a built-in primitive data type for strings.<br>Instead, the standard Java library has a predefined class called String.</p>
<h2 id="Instantiating-Creating-a-String-object"><a href="#Instantiating-Creating-a-String-object" class="headerlink" title="Instantiating (Creating) a String object"></a>Instantiating (Creating) a String object</h2><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="Concatenation"><a href="#Concatenation" class="headerlink" title="Concatenation"></a>Concatenation</h2><p>Java allows you to use the + sign to join two strings together.</p>
<p>You can also concatenate a String with a numerical value.</p>
<h2 id="Substrings"><a href="#Substrings" class="headerlink" title="Substrings"></a>Substrings</h2><p>A substring is defined as a string that is part of a longer string.</p>
<p>In Java, you can extract a substring from a larger string with the substring method.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
String str <span class="token operator">=</span> <span class="token string">"this is a string"</span>
String substr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// gives you the characters in str from index l through r - 1</span>
<span class="token comment" spellcheck="true">// which is the word "string"</span>
</code></pre>
<h2 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h2><p>The <code>length()</code> method indicates how many characters are in a String.</p>
<p>Strings are immutable. They can’t be directly changed or altered.</p>
<p>You can make new Strings, but you can’t alter existing ones.</p>
<h2 id="Searching-through-a-String"><a href="#Searching-through-a-String" class="headerlink" title="Searching through a String"></a>Searching through a String</h2><p>The String class provides a method called <code>indexOf()</code> that will allow you to search for an individual character or substring within a String.</p>
<p>If the search is successful, then the index of the substring is returned.</p>
<p>If the substring is not found within the String, the method returns a value of -1.</p>
<h2 id="Equality-of-String-objects"><a href="#Equality-of-String-objects" class="headerlink" title="Equality of String objects"></a>Equality of String objects</h2><p>Use the <code>equals()</code> method to check 2 Strings or equality in the following manner:</p>
<pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span> <span class="token string">"string"</span>
String b <span class="token operator">=</span> <span class="token string">"string"</span>
Boolean result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>You cannot use <code>==</code> to compare Strings, because Strings are not primitive types.</p>
<p>Use the <code>compareTo()</code> method to compare each String’s relative position in the ASCII chart.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning Week 2: Gradient Descent and Vectorization]]></title>
      <url>/2017/09/21/machine_learning_week_2/</url>
      <content type="html"><![CDATA[<p>Resources from <a href="https://www.coursera.org/learn/machine-learning/" target="_blank" rel="external">Coursera</a>.</p>
<p>The second week of the machine learning course. Basically focused on the same topic as the first week, regression problems (including linear and polynomial regression) and gradient descent. However, more details of gradient descent were talked about, and the idea of using vectorization to increase the efficiency of gradient descent was introduced.</p>
<h2 id="Polynomial-Regression"><a href="#Polynomial-Regression" class="headerlink" title="Polynomial Regression"></a>Polynomial Regression</h2><p>The process of polynomial regression is based on the process of linear regression, except for the fact that it creates new features out of the original features of the dataset. In other words, suppose if you have two features <em>a</em> and <em>b</em>, we can create three more features <em>a<sup>2</sup></em>, <em>ab</em>, and <em>b<sup>2</sup></em>. This way, we can fit non-linear data using a method very similar to linear regression.</p>
<p>It is also worth noticing in this example of the relationship between house prices and house sizes that, although both hypotheses fit the dataset well, it is uncommon for house prices to drop when the size reaches a certain amount, so the second hypothesis would be a better choice.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/polynomial_regression.png" width="500"></p>
<h2 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h2><p>Vectorization is a way increase the efficiency of calculations by doing matrix and vector multiplications instead of using looping over the elements one by one. It works because most programming languages have linear algebra libraries that are optimized for computations like this.</p>
<p>This is an example of vectorization. The superscript <em>T</em> means taking the transpose of the matrix or vector.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/vectorization.png" width="700"></p>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Supervised Learning </tag>
            
            <tag> Regression </tag>
            
            <tag> Vectorization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Iteration While / For]]></title>
      <url>/2017/09/19/ap_comp_sci_a_7/</url>
      <content type="html"><![CDATA[<h2 id="The-While-Loop"><a href="#The-While-Loop" class="headerlink" title="The While Loop"></a>The While Loop</h2><p>A condition is a statement that evaluates to either true or false.</p>
<p>A while loop repeats as long as its condition is true.</p>
<p>Java’s while loop has the following structure:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Counter-Controlled-Loop"><a href="#Counter-Controlled-Loop" class="headerlink" title="Counter-Controlled Loop"></a>Counter-Controlled Loop</h2><p>A counter-controlled loop is one that repeats a predetermined number of times.</p>
<p>The condition in this loop is controlled by a counter variable.</p>
<p>The counter variable keeps track of the number of times that a loop is executed.</p>
<pre class=" language-java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// the numbers 0 through 10 are printed</span>
</code></pre>
<h2 id="Infinite-Loop"><a href="#Infinite-Loop" class="headerlink" title="Infinite Loop"></a>Infinite Loop</h2><p>A common mistake is when a programmer forgets to increment the counter variable within the body of the while loop.<br>The counter will never reach the condition that ends the loop.</p>
<pre class=" language-java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// a lot of 0s are printed</span>
</code></pre>
<h2 id="The-For-Loop"><a href="#The-For-Loop" class="headerlink" title="The For Loop"></a>The For Loop</h2><p>Counter-controlled loops are so frequently used that programming languages have developed a special structure for them.</p>
<p>The for statement combines counter initialization, condition test, and counter update into a single expression.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// The two pieces of code do basically the same thing.</span>

<span class="token comment" spellcheck="true">/*
For Loop:
for (initialize counter; test counter; update counter) {
  body;
}
*/</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*
While Loop:
initialize counter;
while (test counter) {
  body;
  update counter;
}
*/</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>In the while loop, the counter is declared outside the while code block, so this means it can be used elsewhere in your program.</p>
<p>In the for loop, the counter is declared within the scope of the for loop’s code block. This means it can only be used inside that block.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Relational / Logical Operators]]></title>
      <url>/2017/09/14/ap_comp_sci_a_6/</url>
      <content type="html"><![CDATA[<h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><p>A relational operator tests the relationship between two values.<br>Java has six relational operators:</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>equal to</td>
</tr>
<tr>
<td>!=</td>
<td>not equal to</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>less than or equal to</td>
</tr>
</tbody>
</table>
<h2 id="Equality-Operator"><a href="#Equality-Operator" class="headerlink" title="Equality Operator"></a>Equality Operator</h2><p>Denotes equality testing.</p>
<p>The equality operator, ==, is very confusing to most Java beginners, because it is easy to mix up with the assignment operator, =.<br>Can be used to test primitive types, but not objects such as Strings.</p>
<h2 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h2><p>There are three logical operators in Java:</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
<th>Example</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>equal to</td>
<td>!a</td>
<td>true if a is false, false if a is true</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>not equal to</td>
<td>a &amp;&amp; b</td>
<td>true if a and b are both true, and false otherwise</td>
</tr>
<tr>
<td>&#124;&#124;</td>
<td>greater than</td>
<td>a &#124;&#124; b</td>
<td>true if either a or b is true, and false otherwise</td>
</tr>
</tbody>
</table>
<h2 id="Operator-Precedence"><a href="#Operator-Precedence" class="headerlink" title="Operator Precedence"></a>Operator Precedence</h2><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Not (!)</td>
</tr>
<tr>
<td>2</td>
<td>And (&amp;&amp;)</td>
</tr>
<tr>
<td>3</td>
<td>Or (&#124;&#124;)</td>
</tr>
</tbody>
</table>
<h2 id="Short-Circuit-Evaluation"><a href="#Short-Circuit-Evaluation" class="headerlink" title="Short-Circuit Evaluation"></a>Short-Circuit Evaluation</h2><p>The “and” and “or” operators are “short-circuited”</p>
<p>If the left operand is enough to decide the boolean result of the entire logical operation, then the right operand is not evaluated.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Conditional Statement]]></title>
      <url>/2017/09/13/ap_comp_sci_a_5/</url>
      <content type="html"><![CDATA[<h2 id="Conditional-Statement"><a href="#Conditional-Statement" class="headerlink" title="Conditional Statement"></a>Conditional Statement</h2><p>The <code>if</code> structure in Java consists of 2 parts: a condition and a body.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Java if-else structure is used when you want to do one thing if a condition is true, and another thing if that condition is false.</p>
<p>And if-else structure will execute either the if section or the else section, but never both.</p>
<p>The body of an <code>else if</code> statement will be executed if the <code>if</code> statements and <code>else if</code> above it are not executed and the condition is satisfied.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body2<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body3<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    body4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Data Conversion]]></title>
      <url>/2017/09/12/ap_comp_sci_a_4/</url>
      <content type="html"><![CDATA[<h2 id="Data-Conversion"><a href="#Data-Conversion" class="headerlink" title="Data Conversion"></a>Data Conversion</h2><p>This is a conversion from one primitive type to another.</p>
<p>There are 2 categories.</p>
<h4 id="Widening-conversion"><a href="#Widening-conversion" class="headerlink" title="Widening conversion"></a>Widening conversion</h4><p>Safest, because information is not lost. (int-&gt;double)</p>
<h5 id="Narrowing-conversion"><a href="#Narrowing-conversion" class="headerlink" title="Narrowing conversion"></a>Narrowing conversion</h5><p>This should be avoided because information is lost. (double-&gt;int)</p>
<h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><p>A type cast is used to convert a variable from one type to another.</p>
<p>Place the type name in parentheses in front of the variable to be converted.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> int_a<span class="token punctuation">,</span> int_b<span class="token punctuation">;</span>
<span class="token keyword">double</span> double_a<span class="token punctuation">,</span> double_b<span class="token punctuation">;</span>

int_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
double_a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> int_a<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// double_a is now 1.0</span>

double_b <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
int_b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> double_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// int_b is now 1</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Other Operators]]></title>
      <url>/2017/09/11/ap_comp_sci_a_3/</url>
      <content type="html"><![CDATA[<h2 id="Modulus-Remainder-Operator"><a href="#Modulus-Remainder-Operator" class="headerlink" title="Modulus (Remainder) Operator (%)"></a>Modulus (Remainder) Operator (%)</h2><p>Returns the remainder after dividing the second operand into the first.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// c is now 7 % 3 = 1</span>
</code></pre>
<h2 id="Division-Operator"><a href="#Division-Operator" class="headerlink" title="Division Operator (/)"></a>Division Operator (/)</h2><p>If the first and second operands are both integers, then / performs integer division, where the fractional component of the result is discarded.</p>
<p>If either or both of the operands are doubles, the floating-point (decimal) division is performed.</p>
<p>Multiplying by 1.0 will give you a decimal result without changing the result.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> int_a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> int_b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> int_res<span class="token punctuation">;</span>
<span class="token keyword">double</span> double_a <span class="token operator">=</span> <span class="token number">7.0</span><span class="token punctuation">,</span> double_b <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">,</span> double_res<span class="token punctuation">;</span>

int_res <span class="token operator">=</span> int_a <span class="token operator">/</span> int_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// int_res is now 7 / 2 = 3</span>

double_res <span class="token operator">=</span> double_a <span class="token operator">/</span> double_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// double_res is now 7.0 / 2.0 = 3.5</span>

double_res <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> int_a <span class="token operator">/</span> int_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// double_res is now 1.0 * 7 / 2 = 3.5</span>
</code></pre>
<h2 id="Operator-Precedence"><a href="#Operator-Precedence" class="headerlink" title="Operator Precedence"></a>Operator Precedence</h2><table>
<thead>
<tr>
<th>Precedence</th>
<th>Operator</th>
<th>Association</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>()</td>
<td>none</td>
</tr>
<tr>
<td>2</td>
<td>(double)</td>
<td>right to left</td>
</tr>
<tr>
<td>3</td>
<td>* / %</td>
<td>left to right</td>
</tr>
<tr>
<td>4</td>
<td>+ -</td>
<td>left to right</td>
</tr>
<tr>
<td>5</td>
<td>=</td>
<td>right to left</td>
</tr>
</tbody>
</table>
<h2 id="Increment-Decrement-Operator-–"><a href="#Increment-Decrement-Operator-–" class="headerlink" title="Increment/Decrement Operator (++/–)"></a>Increment/Decrement Operator (++/–)</h2><p>Increases/Decreases the value of a variable by 1.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

cnt<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// cnt is now 1</span>

cnt<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// cnt is now 0 again</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Basic Operators]]></title>
      <url>/2017/09/09/ap_comp_sci_a_2/</url>
      <content type="html"><![CDATA[<h2 id="The-Assignment-Operator"><a href="#The-Assignment-Operator" class="headerlink" title="The Assignment Operator (=)"></a>The Assignment Operator (=)</h2><p>This is used to assign a value to a variable.</p>
<p>Be careful not to confuse it with the mathematical equals sign.</p>
<p>The assignment occurs from right to left.</p>
<p>The value on the right is copied into the variable on the left.</p>
<pre class=" language-java"><code class="language-java">integer <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

decimal <span class="token operator">=</span> <span class="token number">0.12</span><span class="token punctuation">;</span>

bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="Initializing-Replacing-Variables"><a href="#Initializing-Replacing-Variables" class="headerlink" title="Initializing/Replacing Variables"></a>Initializing/Replacing Variables</h2><p>You can declare and assign a value to a variable at the same time.</p>
<p>The assignment operator can be used to replace the contents of a variable with a new one.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> integer <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// integer is now 20;</span>

integer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// integer is now 30;</span>
</code></pre>
<h2 id="The-Concatenation-Operator"><a href="#The-Concatenation-Operator" class="headerlink" title="The Concatenation Operator (+)"></a>The Concatenation Operator (+)</h2><p>When the plus sign is used in a <code>System.out.println()</code> statement with a String, it concatenates the two pieces of data together.</p>
<pre class=" language-java"><code class="language-java">String string <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string <span class="token operator">+</span> <span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// prints "Hello World!"</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP CompSci A: Variables]]></title>
      <url>/2017/09/08/ap_comp_sci_a_1/</url>
      <content type="html"><![CDATA[<h2 id="Variable-Declaration"><a href="#Variable-Declaration" class="headerlink" title="Variable Declaration"></a>Variable Declaration</h2><p>A variable is a named piece of memory that you can use to store information in a Java program.</p>
<p>A variable declaration consists of two parts: a data type and an identifier name.</p>
<h2 id="Primitive-Data-Types"><a href="#Primitive-Data-Types" class="headerlink" title="Primitive Data Types"></a>Primitive Data Types</h2><p>Integer data type (int)</p>
<p>Double data type (double)</p>
<p>Boolean data type (boolean)</p>
<h2 id="Variable-Naming-Rules"><a href="#Variable-Naming-Rules" class="headerlink" title="Variable Naming Rules"></a>Variable Naming Rules</h2><p>A variable name must begin with a letter.</p>
<p>It must be a sequence of letters and digits.</p>
<p>Symbols cannot be used in variable names.</p>
<p>The length of a variable name is unlimited.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> integer<span class="token punctuation">;</span>

<span class="token keyword">double</span> decimal<span class="token punctuation">;</span>

<span class="token keyword">boolean</span> bool<span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP CompSci A </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Machine Learning Week 1: Introduction and Linear Regression]]></title>
      <url>/2017/09/03/machine_learning_week_1/</url>
      <content type="html"><![CDATA[<p>Resources from <a href="https://www.coursera.org/learn/machine-learning/" target="_blank" rel="external">Coursera</a>.</p>
<p>Took up a machine learning course on Coursera quite a while ago recommended by a friend of mine. I decided to update this blog constantly to keep track of what I’ve learnt so far.</p>
<h2 id="Supervised-and-Unsupervised-Learning"><a href="#Supervised-and-Unsupervised-Learning" class="headerlink" title="Supervised and Unsupervised Learning"></a>Supervised and Unsupervised Learning</h2><p>In supervised learning, we are given a dataset and already know what the correct output should look like, and we use the relationship between the given inputs and outputs to predict the outputs of new inputs.</p>
<p>In unsupervised learning, we do not know the relationship between inputs and outputs, instead, we try to find structures in the data given by making clusters out of the dataset.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/supervised_learning.png" width="250" height="230"> <img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/unsupervised_learning.png" width="250" height="230"></p>
<h2 id="Classification-and-Regression"><a href="#Classification-and-Regression" class="headerlink" title="Classification and Regression"></a>Classification and Regression</h2><p>Supervised learning can also be divided into two categories, classification and regression. In classification problems, we try to predict the categories of the given inputs. In regression problems, we try to predict the outputs within a continuous output; in other words, we try to find a continuous function which predicts an output value for each input value.</p>
<h2 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h2><p>Generally speaking, linear regression is simply the process of finding linear function that fits the dataset well. The function is called the hypothesis. In the process, we do iterations to minimize a cost function <span>$J(\theta_0, \theta_1) = \dfrac {1}{2m} \displaystyle \sum _{i=1}^m \left (h_\theta (x_{i}) - y_{i} \right)^2$</span><!-- Has MathJax -->, which represents the sum of squared error between the hypothesis function and the given outputs of the dataset.</p>
<p>To do this, we implement something called gradient descent. During gradient descent, we calculate the partial derivative of the cost function with respect to each parameter and change the parameter in a way that decreases the cost function by the largest amount. <span>$\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta)$</span><!-- Has MathJax --></p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/gradient_descent.png" width="600"></p>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Supervised Learning </tag>
            
            <tag> Regression </tag>
            
            <tag> Unsupervised Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matrix Chain Multiplication]]></title>
      <url>/2016/09/15/matrix_chain_multiplication/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=383" target="_blank" rel="external">UVA Online Judge</a>.</p>
<h2 id="Matrix-Chain-Multiplication"><a href="#Matrix-Chain-Multiplication" class="headerlink" title="Matrix Chain Multiplication"></a>Matrix Chain Multiplication</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Suppose you have to evaluate an expression like A*B*C*D*E where A,B,C,D and E are matrices. Since matrix multiplication is associative, the order in which multiplications are performed is arbitrary. However, the number of elementary multiplications needed strongly depends on the evaluation order you choose.</p>
<p>For example, let A be a 50*10 matrix, B a 10*20 matrix and C a 20*5 matrix. There are two different strategies to compute A*B*C, namely (A*B)*C and A*(B*C). The first one takes 15000 elementary multiplications, but the second one only 3500.</p>
<p>Your job is to write a program that determines the number of elementary multiplications needed for a given evaluation strategy.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Input consists of two parts: a list of matrices and a list of expressions.</p>
<p>The first line of the input file contains one integer <em>n</em> (1 ≤ <em>n</em> ≤ 26), representing the number of<br>matrices in the first part. The next <em>n</em> lines each contain one capital letter, specifying the name of the<br>matrix, and two integers, specifying the number of rows and columns of the matrix.</p>
<p>The second part of the input file strictly adheres to the following syntax (given in EBNF):<br>SecondPart = Line { Line } <eof><br>Line = Expression <cr><br>Expression = Matrix | “(“ Expression Expression “)”<br>Matrix = “A” | “B” | “C” | … | “X” | “Y” | “Z”</cr></eof></p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each expression found in the second part of the input file, print one line containing the word ‘error’<br>if evaluation of the expression leads to an error due to non-matching matrices. Otherwise print one<br>line containing the number of elementary multiplications needed to evaluate the expression in the way<br>specified by the parentheses.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>We can simply simulate the calculations by using a stack. Each time a matrix is inputted, we push it into the stack. Each time we come across a right bracket, we take out two matrices on top and calculate the dimensions of the product, add the number of calculations to the integer <em>sum</em>, and push the product into the stack. If the two matrices cannot be multiplied, we simply print “error”; otherwise, the integer <em>sum</em> is printed.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> matrix
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> a<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span>
<span class="token keyword">char</span> t1<span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>t1<span class="token punctuation">;</span>
        t2<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span>a<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token operator">&lt;</span>matrix<span class="token operator">></span> s<span class="token punctuation">;</span>
        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'('</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">')'</span><span class="token punctuation">)</span>
                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                p1<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                p2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>r<span class="token operator">!=</span>p2<span class="token punctuation">.</span>c<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    ok<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                sum<span class="token operator">+</span><span class="token operator">=</span>p1<span class="token punctuation">.</span>r<span class="token operator">*</span>p1<span class="token punctuation">.</span>c<span class="token operator">*</span>p2<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
                p1<span class="token punctuation">.</span>r<span class="token operator">=</span>p2<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token string">"error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Stack </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Polycarp at the Radio]]></title>
      <url>/2016/09/02/polycarp_at_the_radio/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="http://codeforces.com/problemset/problem/723/C" target="_blank" rel="external">Codeforces</a>.</p>
<h2 id="Polycarp-at-the-Radio"><a href="#Polycarp-at-the-Radio" class="headerlink" title="Polycarp at the Radio"></a>Polycarp at the Radio</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Polycarp is a music editor at the radio station. He received a playlist for tomorrow, that can be represented as a sequence <em>a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub></em>, where <em>a<sub>i</sub></em> is a band, which performs the <em>i</em>-th song. Polycarp likes bands with the numbers from 1 to <em>m</em>, but he doesn’t really like others.</p>
<p>We define as <em>b<sub>j</sub></em> the number of songs the group <em>j</em> is going to perform tomorrow. Polycarp wants to change the playlist in such a way that the minimum among the numbers <em>b<sub>1</sub>, b<sub>2</sub>, …, b<sub>m</sub></em> will be as large as possible.</p>
<p>Find this maximum possible value of the minimum among the bj (1 ≤ <em>j</em> ≤ <em>m</em>), and the minimum number of changes in the playlist Polycarp needs to make to achieve it. One change in the playlist is a replacement of the performer of the <em>i</em>-th song with any other group.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input contains two integers n and m (1 ≤ <em>m</em> ≤ <em>n</em> ≤ 2000).</p>
<p>The second line contains <em>n</em> integers <em>a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub></em> (1 ≤ <em>a<sub>i</sub></em> ≤ 10<sup>9</sup>), where ai is the performer of the i-th song.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>In the first line print two integers: the maximum possible value of the minimum among the bj (1 ≤ <em>j</em> ≤ <em>m</em>), where <em>b<sub>j</sub></em> is the number of songs in the changed playlist performed by the <em>j</em>-th band, and the minimum number of changes in the playlist Polycarp needs to make.</p>
<p>In the second line print the changed playlist.</p>
<p>If there are multiple answers, print any of them.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Input<br>4 2<br>1 2 3 2<br>Output<br>2 1<br>1 2 1 2</p>
<p>Input<br>7 3<br>1 3 2 2 2 2 1<br>Output<br>2 1<br>1 3 3 2 2 2 1</p>
<p>Input<br>4 4<br>1000000000 100 7 1000000000<br>Output<br>1 4<br>1 2 3 4</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The general idea is that, the maximum value of the minimum of the values is equal to <em>n</em>/<em>m</em>. We iterate through a vector storing how many times each band plays and use another vector to store the difference between that number and the average. Then, we iterate through the vector <em>a<sub>i</sub></em> to change the playlist.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">2010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>band<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ave<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>
            band<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ave<span class="token operator">=</span>n<span class="token operator">/</span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ave<span class="token operator">-</span>band<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>ave<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            add<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Number Cards]]></title>
      <url>/2016/08/13/number_cards/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="http://bnds.tech/problem/8" target="_blank" rel="external">BNDSOJ</a>.</p>
<h2 id="数字卡之沙耶香的音符"><a href="#数字卡之沙耶香的音符" class="headerlink" title="数字卡之沙耶香的音符"></a>数字卡之沙耶香的音符</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>最近沉迷于魔法少女小圆的MisakaMikoto喜欢上了蓝毛沙耶香，于是他正在收集各式各样的音符卡片，但是我们都知道只有经过合理组合的音符才能够发出让人心旷神怡你的音乐，于是MisakaMikoto找到了小提琴专家AD1024帮助他找到了一个适合的音符卡片组合。可是MisakaMikoto家的猫趁他不在家的时候把他收集的音符卡片弄乱了，而穿越时空而来的沙耶香发现了这件事后又重新将这些音符卡片进行了排列，这让MisakaMikoto非常的头大，于是他找到了已经做完了teacherone交付的任务正闲着的你，希望你能够帮他找到在这个排列中找到AD1024所写的音符卡组合。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数NN, MM, 分别表示沙耶香重新排列的所有音符卡的长度以及AD1024所找到的音符卡组合的长度</p>
<p>第二行<em>N</em>个正整数<em>Ni</em>, 表示每一个音符</p>
<p>第三行<em>M</em>个正整数<em>Mi</em>, 表示每一个音符</p>
<p>注：输入保证<em>M&lt;N</em></p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>第一行若干个正整数，表示AD1024的音符卡片排列在沙耶香重新组合的音符卡片排列中的哪些位置出现了</p>
<p>第二行两个正整数，分别表示第一次出现的最开头和最后一次出现的最末尾</p>
<p>如果没有出现过，输出”Orz yulemao”.</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>输入样例1<br>9 3<br>1 2 3 1 2 3 1 2 3<br>1 2 3  </p>
<p>输出样例1<br>1 4 7<br>1 9  </p>
<p>输入样例2<br>9 4<br>1 2 3 1 2 3 1 2 3<br>1 2 3 4  </p>
<p>输出样例2<br>Orz yulemao</p>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于20%的数据 1≤<em>N</em>≤10,1≤<em>M</em>≤3<br>对于40%的数据 1≤<em>N</em>≤100,1≤<em>M</em>≤10<br>对于70%的数据 1≤<em>N</em>≤10,000,1≤<em>M</em>≤150<br>对于100%的数据 1≤<em>N</em>≤1,000,000,1≤<em>M</em>≤1,000,1&lt;<em>Ni</em>,<em>Mi</em>&lt;10,000,000,000</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>In this problem, you are required to find a specific subsequence of numbers in given sequence. You have to find the place of the first number where the subsequence is found the first time and the place of the last number where the subsequence is found the last time.</p>
<p>It is a pretty straightforward KMP problem. Although KMP is mainly used for finding substrings, it could also be used in this problem to find subsequences of numbers.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>maxn <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sub<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Next<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> first <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">;</span>

    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                first <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            last <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Orz yulemao"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> last <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> KMP </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Subset Sums]]></title>
      <url>/2016/08/07/subset_sums/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="http://train.usaco.org/usacogate" target="_blank" rel="external">USACO</a>.  </p>
<h2 id="Subset-Sums"><a href="#Subset-Sums" class="headerlink" title="Subset Sums"></a>Subset Sums</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>For many sets of consecutive integers from 1 through <em>N</em> (1 &lt;= <em>N</em> &lt;= 39), one can partition the set into two sets whose sums are identical.</p>
<p>For example, if <em>N</em>=3, one can partition the set {1, 2, 3} in one way so that the sums of both subsets are identical:</p>
<p>{3} and {1,2}<br>This counts as a single partitioning (i.e., reversing the order counts as the same partitioning and thus does not increase the count of partitions).</p>
<p>If <em>N</em>=7, there are four ways to partition the set {1, 2, 3, … 7} so that each partition has the same sum:</p>
<p>{1,6,7} and {2,3,4,5}<br>{2,5,7} and {1,3,4,6}<br>{3,4,7} and {1,2,5,6}<br>{1,2,4,7} and {3,5,6}<br>Given N, your program should print the number of ways a set containing the integers from 1 through <em>N</em> can be partitioned into two sets whose sums are identical. Print 0 if there are no such ways.</p>
<p>Your program must calculate the answer, not look it up from a table.</p>
<h3 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h3><p>The input file contains a single line with a single integer representing <em>N</em>, as above.</p>
<h3 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h3><p>The output file contains a single line with a single integer that tells how many same-sum partitions can be made from the set {1, 2, …, <em>N</em>}. The output file should contain 0 if there are no ways to make a same-sum partition.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>7</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>4</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>First of all, if the sum is odd, then there is no solution. Dynamic programming could be used to solve this problem. Specifically, <em>dp[i]</em> stands for the ways to make a set of a sum <em>i</em> and we can update <em>dp[i]</em> using the values of <em>dp[j]</em> where <em>j</em> &lt; <em>i</em>, which has been calculated already.</p>
<p>It is worth noticing that the inner loop decreases <em>j</em> from <em>m</em> to <em>i</em> instead of the other way around.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// freopen("subset.in", "r", stdin);</span>
    <span class="token comment" spellcheck="true">// freopen("subset.out", "w", stdout);</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    m <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Strange Elevator]]></title>
      <url>/2016/08/04/strange_elevator/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://www.luogu.org/problem/show?pid=1135" target="_blank" rel="external">Luogu</a>.  </p>
<h2 id="P1135-奇怪的电梯"><a href="#P1135-奇怪的电梯" class="headerlink" title="P1135 奇怪的电梯"></a>P1135 奇怪的电梯</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>呵呵，有一天我做了一个梦，梦见了一种很奇怪的电梯。大楼的每一层楼都可以停电梯，而且第i层楼(1&lt;=i&lt;=N)上有一个数字Ki(0&lt;=Ki&lt;=N)。电梯只有四个按钮：开，关，上，下。上下的层数等于当前楼层上的那个数字。当然，如果不能满足要求，相应的按钮就会失灵。例如：3 3 1 2 5代表了Ki(K1=3,K2=3,……)，从一楼开始。在一楼，按“上”可以到4楼，按“下”是不起作用的，因为没有-2楼。那么，从A楼到B楼至少要按几次按钮呢？</p>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：<br>输入文件共有二行，第一行为三个用空格隔开的正整数，表示N,A,B(1≤N≤200, 1≤A,B≤N)，第二行为N个用空格隔开的正整数，表示Ki。</p>
<p>输出格式：<br>输出文件仅一行，即最少按键次数,若无法到达，则输出-1。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>In the problem, you are in a strange elevator. There are in <em>N</em> floors in total, each with a number <em>k</em> on it. You can either press up or down on each floor and it will go up or down <em>k</em> floors (only if floor number is valid). You are currently on floor <em>A</em> and you want to go to floor <em>B</em>. How many steps will it take? Or print -1 if the destination cannot be reached.</p>
<p>The simplest way to do this is to use BFS. Start off at floor <em>A</em> and try to reach floor <em>B</em>. The <em>v</em> array is used mark whether a floor has already been visited. <em>ans</em> is initially set as -1, and if the floor cannot be reached, <em>ans</em> will not change its value.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> map<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> layer
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>st<span class="token punctuation">;</span>
<span class="token punctuation">}</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t<span class="token punctuation">.</span>n<span class="token operator">=</span>a<span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>st<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span>layer<span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        layer p<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>n<span class="token operator">+</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token operator">+</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            layer tt<span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>n<span class="token operator">=</span>p<span class="token punctuation">.</span>n<span class="token operator">+</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>st<span class="token operator">=</span>p<span class="token punctuation">.</span>st<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>n<span class="token operator">==</span>b<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>    
                ans<span class="token operator">=</span>tt<span class="token punctuation">.</span>st<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>tt<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>n<span class="token operator">-</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token operator">-</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            layer tt<span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>n<span class="token operator">=</span>p<span class="token punctuation">.</span>n<span class="token operator">-</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>st<span class="token operator">=</span>p<span class="token punctuation">.</span>st<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>n<span class="token operator">==</span>b<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token operator">=</span>tt<span class="token punctuation">.</span>st<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>tt<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Search </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Select Numbers]]></title>
      <url>/2016/08/02/select_numbers/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://www.luogu.org/problem/show?pid=1036" target="_blank" rel="external">Luogu</a>.  </p>
<h2 id="P1036-选数"><a href="#P1036-选数" class="headerlink" title="P1036 选数"></a>P1036 选数</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知 n 个整数 x1,x2,…,xn，以及一个整数 k（k＜n）。从 n 个整数中任选 k 个整数相加，可分别得到一系列的和。例如当 n=4，k＝3，4 个整数分别为 3，7，12，19 时，可得全部的组合与它们的和为：</p>
<p>3＋7＋12=22<br>3＋7＋19＝29<br>7＋12＋19＝38<br>3＋12＋19＝34。</p>
<p>现在，要求你计算出和为素数共有多少种。<br>例如上例，只有一种的和为素数：3＋7＋19＝29。</p>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：<br>n , k （1&lt;=n&lt;=20，k＜n）<br>x1,x2，…,xn （1&lt;=xi&lt;=5000000）</p>
<p>输出格式：<br>一个整数（满足条件的种数）。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>In this problem, you have to select <em>k</em> from <em>n</em> numbers so that the sum of those numbers is a prime number.</p>
<p>It can be easily solved using a DFS, depth-first search, algorithm. Simply list the ways that the numbers can be selected and check if the sum is prime. In order to prevent counting the same sequence, in different orders, for several times, we can select numbers in an acsending or desending order.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>y<span class="token operator">*</span>y<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    amount<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">select</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>count<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">select</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> DFS </tag>
            
            <tag> Search </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/06/30/hello_world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[P1508 Likecloud-吃、吃、吃]]></title>
      <url>/2016/05/20/p1508/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://www.luogu.org/problemnew/show/1508" target="_blank" rel="external">Luogu</a>.  </p>
<h2 id="P1508-Likecloud-吃、吃、吃"><a href="#P1508-Likecloud-吃、吃、吃" class="headerlink" title="P1508 Likecloud-吃、吃、吃"></a>P1508 Likecloud-吃、吃、吃</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>正处在某一特定时期之中的李大水牛由于消化系统比较发达，最近一直处在饥饿的状态中。某日上课，正当他饿得头昏眼花之时，眼前突然闪现出了一个<em>n</em>*<em>m</em>(<em>n</em> and <em>m</em>&lt;=200)的矩型的巨型大餐桌，而自己正处在这个大餐桌的一侧的中点下边。餐桌被划分为了<em>n</em>*<em>m</em>个小方格，每一个方格中都有一个圆形的巨型大餐盘，上面盛满了令李大水牛朝思暮想的食物。李大水牛已将餐桌上所有的食物按其所能提供的能量打了分（有些是负的，因为吃了要拉肚子），他决定从自己所处的位置吃到餐桌的另一侧，但他吃东西有一个习惯——只吃自己前方或左前方或右前方的盘中的食物。</p>
<p>由于李大水牛已饿得不想动脑了，而他又想获得最大的能量，因此，他将这个问题交给了你。</p>
<p>每组数据的出发点都是最后一行的中间位置的下方！</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行为<em>m</em> <em>n</em>.(<em>n</em>为奇数)，李大水牛一开始在最后一行的中间的下方</p>
<p>接下来为<em>m</em>*<em>n</em>的数字距阵.</p>
<p>共有<em>m</em>行,每行<em>n</em>个数字.数字间用空格隔开.代表该格子上的盘中的食物所能提供的能量.</p>
<p>数字全是整数.</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个数,为你所找出的最大能量值.</p>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入样例#1:<br>6 7<br>16 4 3 12 6 0 3<br>4 -5 6 7 0 0 2<br>6 0 -1 -2 3 6 8<br>5 3 4 0 0 -2 7<br>-1 7 4 0 7 -5 6<br>0 -1 3 4 12 4 2</p>
<p>输出样例#1：<br>41</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接用一个记忆化深搜就能ac的，数组是从0开的，所以从（m, n/2）这个位置开始，</p>
<p>向上深搜，每次尝试左上、右上、正上三个位置。</p>
<p><strong>注意几个地方：</strong></p>
<ol>
<li><p>从最后一行的下面开始，不是最后一行。</p>
</li>
<li><p>去过的地方存一下，不然可能会TLE。</p>
</li>
<li><p>边界是到了第一行，即x==0。</p>
</li>
<li><p>分类处理一下最后一列和第一列的情况。</p>
</li>
</ol>
<p>似乎不需要优化就能ac的。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">210</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
<span class="token keyword">int</span> map<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">dp1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2147483647</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dp1</span><span class="token punctuation">(</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2147483647</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2147483647</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token function">dp1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> DFS </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Introduction]]></title>
      <url>/2016/04/12/introduction/</url>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>After weeks of theme selecting and configuring, it’s finally time to start blogging.</p>
<p>Not much to say. I’ll probably be mainly blogging about stuff related to programming, mostly algorithms and C++, I suppose. Maybe other stuff will be included as well, like AP compsci stuff or machine learning stuff, but I’m not sure yet.</p>
<p>That’s about it. If you want to know more, visit me at <a href="https://github.com/leniumC" target="_blank" rel="external">Github</a>. If you come across any problems, or if you just want to chat, feel free to contact me at <em>leniumc@hotmail.com</em>.</p>
<p>Anyway, thanks for reading.</p>
]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>

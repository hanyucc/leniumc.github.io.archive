<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[AP Computer Science: Methods 2]]></title>
      <url>/2017/10/17/ap_comp_sci11/</url>
      <content type="html"><![CDATA[<h3 id="Non-Void-Method-Return"><a href="#Non-Void-Method-Return" class="headerlink" title="Non-Void Method Return"></a>Non-Void Method Return</h3><p>A non-void method’s return value can be just about anything, as long as the return keyword matches the return type.</p>
<p>A method can return a literal value.</p>
<pre class=" language-Java"><code class="language-Java">return "hello world";
// "hello world"
</code></pre>
<p>A method can return the contents of a variable.</p>
<pre class=" language-Java"><code class="language-Java">int a = 100;
return a;
// 100
</code></pre>
<p>A method can return the result of a mathematical expression.</p>
<pre class=" language-Java"><code class="language-Java">return 1 + 2;
// 3
</code></pre>
<p>A method can return the result of a boolean expression.</p>
<pre class=" language-Java"><code class="language-Java">return 1 < 2;
// true
</code></pre>
<h3 id="Calling-Non-Void-Methods"><a href="#Calling-Non-Void-Methods" class="headerlink" title="Calling Non-Void Methods"></a>Calling Non-Void Methods</h3><p>Non-void methods always returns a value, then this value has to be stored in a variable, printed, or passed to a Java control structure.</p>
<p>A method call can be in an assignment statement.</p>
<pre class=" language-Java"><code class="language-Java">int a = getInt();
</code></pre>
<p>A method call can be in a <code>println</code> statement.</p>
<pre class=" language-Java"><code class="language-Java">System.out.println(getString());
</code></pre>
<p>A method call can be inside a Java control structure such as an if statement or a looping structure.</p>
<pre class=" language-Java"><code class="language-Java">while (isValid()) {
  // do something
}
</code></pre>
<p>A method call can be inside the return statement of another method.</p>
<pre class=" language-Java"><code class="language-Java">return getDouble() / 1.1;
</code></pre>
<h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><p>An argument is a value that is passed to a method so that the method can use that value in its processing.</p>
<p>An argument is located inside the parentheses that follow a method name.</p>
<p>A method can have 0, 1, or more arguments. Multiple arguments are separated by commas.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Methods 1]]></title>
      <url>/2017/10/16/ap_comp_sci10/</url>
      <content type="html"><![CDATA[<h3 id="Method-Types"><a href="#Method-Types" class="headerlink" title="Method Types"></a>Method Types</h3><p>A method is simply a block of code that is given a name.</p>
<p>In Java, there are two types of methods that you can write. These methods are identified by the task they perform.</p>
<p><strong>Void methods</strong>: These are methods that do not give you anything back. They have no return statement.</p>
<p><strong>Non-void methods</strong>: These are methods that give you something back. They must have a return statement.</p>
<h3 id="Void-Methods"><a href="#Void-Methods" class="headerlink" title="Void Methods"></a>Void Methods</h3><p>To execute or call a void method, you write the method name, along with open and closed parentheses.</p>
<p>Note that a void method is called as a single statement on a line by itself.</p>
<h3 id="Non-Void-Methods"><a href="#Non-Void-Methods" class="headerlink" title="Non-Void Methods"></a>Non-Void Methods</h3><p>Non-void methods differ from void methods in that they give something back.</p>
<p>What they give back is dependent upon the return type.</p>
<p>The return type declares what the method is going to give back, or return.</p>
<p>The keyword return is required in all non-void methods.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Strings]]></title>
      <url>/2017/10/13/ap_comp_sci9/</url>
      <content type="html"><![CDATA[<h3 id="Java-Strings"><a href="#Java-Strings" class="headerlink" title="Java Strings"></a>Java Strings</h3><p>Java does not have a built-in primitive data type for strings.<br>Instead, the standard Java library has a predefined class called String.</p>
<h3 id="Instantiating-Creating-a-String-object"><a href="#Instantiating-Creating-a-String-object" class="headerlink" title="Instantiating (Creating) a String object"></a>Instantiating (Creating) a String object</h3><pre class=" language-Java"><code class="language-Java">String str = “”;
</code></pre>
<h3 id="Concatenation"><a href="#Concatenation" class="headerlink" title="Concatenation"></a>Concatenation</h3><p>Java allows you to use the + sign to join two strings together.</p>
<p>You can also concatenate a String with a numerical value.</p>
<h3 id="Substrings"><a href="#Substrings" class="headerlink" title="Substrings"></a>Substrings</h3><p>A substring is defined as a string that is part of a longer string.</p>
<p>In Java, you can extract a substring from a larger string with the substring method.</p>
<pre class=" language-Java"><code class="language-Java">int l = 10, r = 16;
String str = “this is a string”;
String substr = str.substring(l, r);
// gives you the characters in str from index l through r – 1
// which is the word “string”
</code></pre>
<h3 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h3><p>The <code>length()</code> method indicates how many characters are in a String.</p>
<p>Strings are immutable. They can’t be directly changed or altered.</p>
<p>You can make new Strings, but you can’t alter existing ones.</p>
<h3 id="Searching-through-a-String"><a href="#Searching-through-a-String" class="headerlink" title="Searching through a String"></a>Searching through a String</h3><p>The String class provides a method called <code>indexOf()</code> that will allow you to search for an individual character or substring within a String.</p>
<p>If the search is successful, then the index of the substring is returned.</p>
<p>If the substring is not found within the String, the method returns a value of -1.</p>
<h3 id="Equality-of-String-objects"><a href="#Equality-of-String-objects" class="headerlink" title="Equality of String objects"></a>Equality of String objects</h3><p>Use the <code>equals()</code> method to check 2 Strings or equality in the following manner:</p>
<pre class=" language-Java"><code class="language-Java">String a = “string”;
String b = “string”;
Boolean result = a.equals(b);
</code></pre>
<p>You cannot use <code>==</code> to compare Strings, because Strings are not primitive types.</p>
<p>Use the <code>compareTo()</code> method to compare each String’s relative position in the ASCII chart.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Iteration For]]></title>
      <url>/2017/09/19/ap_comp_sci8/</url>
      <content type="html"><![CDATA[<h3 id="The-For-Statement"><a href="#The-For-Statement" class="headerlink" title="The For Statement"></a>The For Statement</h3><p>Counter-controlled loops are so frequently used that programming languages have developed a special structure for them.</p>
<p>The for statement combines counter initialization, condition test, and counter update into a single expression.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// The two pieces of code do basically the same thing.</span>

<span class="token comment" spellcheck="true">/*
For Loop:
for (initialize counter; test counter; update counter) {
  body;
}
*/</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/*
While Loop:
initialize counter;
while (test counter) {
  body;
  update counter;
}
*/</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>In the while loop, the counter is declared outside the while code block, so this means it can be used elsewhere in your program.</p>
<p>In the for loop, the counter is declared within the scope of the for loop’s code block. This means it can only be used inside that block.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Iteration While]]></title>
      <url>/2017/09/18/ap_comp_sci7/</url>
      <content type="html"><![CDATA[<h3 id="The-While-Loop"><a href="#The-While-Loop" class="headerlink" title="The While Loop"></a>The While Loop</h3><p>A condition is a statement that evaluates to either true or false.</p>
<p>A while loop repeats as long as its condition is true.</p>
<p>Java’s while loop has the following structure:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Counter-Controlled-Loop"><a href="#Counter-Controlled-Loop" class="headerlink" title="Counter-Controlled Loop"></a>Counter-Controlled Loop</h3><p>A counter-controlled loop is one that repeats a predetermined number of times.</p>
<p>The condition in this loop is controlled by a counter variable.</p>
<p>The counter variable keeps track of the number of times that a loop is executed.</p>
<pre class=" language-java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// the numbers 0 through 10 are printed</span>
</code></pre>
<h3 id="Infinite-Loop"><a href="#Infinite-Loop" class="headerlink" title="Infinite Loop"></a>Infinite Loop</h3><p>A common mistake is when a programmer forgets to increment the counter variable within the body of the while loop.<br>The counter will never reach the condition that ends the loop.</p>
<pre class=" language-java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// a lot of 0s are printed</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Relational / Logical Operators]]></title>
      <url>/2017/09/14/ap_comp_sci6/</url>
      <content type="html"><![CDATA[<h3 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h3><p>A relational operator tests the relationship between two values.<br>Java has six relational operators:</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>==</td>
<td>equal to</td>
</tr>
<tr>
<td>!=</td>
<td>not equal to</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;=</td>
<td>greater than or equal to</td>
</tr>
<tr>
<td>&lt;=</td>
<td>less than or equal to</td>
</tr>
</tbody>
</table>
<h3 id="Equality-Operator"><a href="#Equality-Operator" class="headerlink" title="Equality Operator"></a>Equality Operator</h3><p>Denotes equality testing.</p>
<p>The equality operator, ==, is very confusing to most Java beginners, because it is easy to mix up with the assignment operator, =.<br>Can be used to test primitive types, but not objects such as Strings.</p>
<h3 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h3><p>There are three logical operators in Java:</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
<th>Example</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>equal to</td>
<td>!a</td>
<td>true if a is false, false if a is true</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>not equal to</td>
<td>a &amp;&amp; b</td>
<td>true if a and b are both true, and false otherwise</td>
</tr>
<tr>
<td>&#124;&#124;</td>
<td>greater than</td>
<td>a &#124;&#124; b</td>
<td>true if either a or b is true, and false otherwise</td>
</tr>
</tbody>
</table>
<h3 id="Operator-Precedence"><a href="#Operator-Precedence" class="headerlink" title="Operator Precedence"></a>Operator Precedence</h3><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Not (!)</td>
</tr>
<tr>
<td>2</td>
<td>And (&amp;&amp;)</td>
</tr>
<tr>
<td>3</td>
<td>Or (&#124;&#124;)</td>
</tr>
</tbody>
</table>
<h3 id="Short-Circuit-Evaluation"><a href="#Short-Circuit-Evaluation" class="headerlink" title="Short-Circuit Evaluation"></a>Short-Circuit Evaluation</h3><p>The “and” and “or” operators are “short-circuited”.</p>
<p>If the left operand is enough to decide the boolean result of the entire logical operation, then the right operand is not evaluated.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Conditional Statement]]></title>
      <url>/2017/09/13/ap_comp_sci5/</url>
      <content type="html"><![CDATA[<h3 id="Conditional-Statement"><a href="#Conditional-Statement" class="headerlink" title="Conditional Statement"></a>Conditional Statement</h3><p>The <code>if</code> structure in Java consists of 2 parts: a condition and a body.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Java if-else structure is used when you want to do one thing if a condition is true, and another thing if that condition is false.</p>
<p>And if-else structure will execute either the if section or the else section, but never both.</p>
<p>The body of an <code>else if</code> statement will be executed if the <code>if</code> statements and <code>else if</code> above it are not executed and the condition is satisfied.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body1<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body2<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body3<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    body4<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Data Conversion]]></title>
      <url>/2017/09/12/ap_comp_sci4/</url>
      <content type="html"><![CDATA[<h3 id="Data-Conversion"><a href="#Data-Conversion" class="headerlink" title="Data Conversion"></a>Data Conversion</h3><p>This is a conversion from one primitive type to another.</p>
<p>There are 2 categories.</p>
<h5 id="Widening-conversion"><a href="#Widening-conversion" class="headerlink" title="Widening conversion"></a>Widening conversion</h5><p>Safest, because information is not lost. (int-&gt;double)</p>
<h5 id="Narrowing-conversion"><a href="#Narrowing-conversion" class="headerlink" title="Narrowing conversion"></a>Narrowing conversion</h5><p>This should be avoided because information is lost. (double-&gt;int)</p>
<h3 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h3><p>A type cast is used to convert a variable from one type to another.</p>
<p>Place the type name in parentheses in front of the variable to be converted.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> int_a<span class="token punctuation">,</span> int_b<span class="token punctuation">;</span>
<span class="token keyword">double</span> double_a<span class="token punctuation">,</span> double_b<span class="token punctuation">;</span>

int_a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
double_a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> int_a<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// double_a is now 1.0</span>

double_b <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
int_b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> double_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// int_b is now 1</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Other Operators]]></title>
      <url>/2017/09/11/ap_comp_sci3/</url>
      <content type="html"><![CDATA[<h3 id="Modulus-Remainder-Operator"><a href="#Modulus-Remainder-Operator" class="headerlink" title="Modulus (Remainder) Operator (%)"></a>Modulus (Remainder) Operator (%)</h3><p>Returns the remainder after dividing the second operand into the first.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// c is now 7 % 3 = 1</span>
</code></pre>
<h3 id="Division-Operator"><a href="#Division-Operator" class="headerlink" title="Division Operator (/)"></a>Division Operator (/)</h3><p>If the first and second operands are both integers, then / performs integer division, where the fractional component of the result is discarded.</p>
<p>If either or both of the operands are doubles, the floating-point (decimal) division is performed.</p>
<p>Multiplying by 1.0 will give you a decimal result without changing the result.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> int_a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> int_b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> int_res<span class="token punctuation">;</span>
<span class="token keyword">double</span> double_a <span class="token operator">=</span> <span class="token number">7.0</span><span class="token punctuation">,</span> double_b <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">,</span> double_res<span class="token punctuation">;</span>

int_res <span class="token operator">=</span> int_a <span class="token operator">/</span> int_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// int_res is now 7 / 2 = 3</span>

double_res <span class="token operator">=</span> double_a <span class="token operator">/</span> double_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// double_res is now 7.0 / 2.0 = 3.5</span>

double_res <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> int_a <span class="token operator">/</span> int_b<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// double_res is now 1.0 * 7 / 2 = 3.5</span>
</code></pre>
<h3 id="Operator-Precedence"><a href="#Operator-Precedence" class="headerlink" title="Operator Precedence"></a>Operator Precedence</h3><table>
<thead>
<tr>
<th>Precedence</th>
<th>Operator</th>
<th>Association</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>()</td>
<td>none</td>
</tr>
<tr>
<td>2</td>
<td>(double)</td>
<td>right to left</td>
</tr>
<tr>
<td>3</td>
<td>* / %</td>
<td>left to right</td>
</tr>
<tr>
<td>4</td>
<td>+ -</td>
<td>left to right</td>
</tr>
<tr>
<td>5</td>
<td>=</td>
<td>right to left</td>
</tr>
</tbody>
</table>
<h3 id="Increment-Decrement-Operator-–"><a href="#Increment-Decrement-Operator-–" class="headerlink" title="Increment/Decrement Operator (++/–)"></a>Increment/Decrement Operator (++/–)</h3><p>Increases/Decreases the value of a variable by 1.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

cnt<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// cnt is now 1</span>

cnt<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// cnt is now 0 again</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Basic Operators]]></title>
      <url>/2017/09/09/ap_comp_sci2/</url>
      <content type="html"><![CDATA[<h3 id="The-Assignment-Operator"><a href="#The-Assignment-Operator" class="headerlink" title="The Assignment Operator (=)"></a>The Assignment Operator (=)</h3><p>This is used to assign a value to a variable.</p>
<p>Be careful not to confuse it with the mathematical equals sign.</p>
<p>The assignment occurs from right to left.</p>
<p>The value on the right is copied into the variable on the left.</p>
<pre class=" language-java"><code class="language-java">integer <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

decimal <span class="token operator">=</span> <span class="token number">0.12</span><span class="token punctuation">;</span>

bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Initializing-Replacing-Variables"><a href="#Initializing-Replacing-Variables" class="headerlink" title="Initializing/Replacing Variables"></a>Initializing/Replacing Variables</h3><p>You can declare and assign a value to a variable at the same time.</p>
<p>The assignment operator can be used to replace the contents of a variable with a new one.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> integer <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// integer is now 20;</span>

integer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// integer is now 30;</span>
</code></pre>
<h3 id="The-Concatenation-Operator"><a href="#The-Concatenation-Operator" class="headerlink" title="The Concatenation Operator (+)"></a>The Concatenation Operator (+)</h3><p>When the plus sign is used in a <code>System.out.println()</code> statement with a String, it concatenates the two pieces of data together.</p>
<pre class=" language-java"><code class="language-java">String string <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string <span class="token operator">+</span> <span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// prints "Hello World!"</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AP Computer Science: Variables]]></title>
      <url>/2017/09/08/ap_comp_sci1/</url>
      <content type="html"><![CDATA[<h3 id="Variable-Declaration"><a href="#Variable-Declaration" class="headerlink" title="Variable Declaration"></a>Variable Declaration</h3><p>A variable is a named piece of memory that you can use to store information in a Java program.</p>
<p>A variable declaration consists of two parts: a data type and an identifier name.</p>
<h3 id="Primitive-Data-Types"><a href="#Primitive-Data-Types" class="headerlink" title="Primitive Data Types"></a>Primitive Data Types</h3><p>Integer data type (int)</p>
<p>Double data type (double)</p>
<p>Boolean data type (boolean)</p>
<h3 id="Variable-Naming-Rules"><a href="#Variable-Naming-Rules" class="headerlink" title="Variable Naming Rules"></a>Variable Naming Rules</h3><p>A variable name must begin with a letter.</p>
<p>It must be a sequence of letters and digits.</p>
<p>Symbols cannot be used in variable names.</p>
<p>The length of a variable name is unlimited.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> integer<span class="token punctuation">;</span>

<span class="token keyword">double</span> decimal<span class="token punctuation">;</span>

<span class="token keyword">boolean</span> bool<span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AP Computer Science </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Week 2: Machine Learning Gradient Descent and Vectorization]]></title>
      <url>/2017/04/15/machine_learning_gradient_descent_and_vectorization/</url>
      <content type="html"><![CDATA[<p>Resources from <a href="https://www.coursera.org/learn/machine-learning/" target="_blank" rel="external">Coursera</a>.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>The second week of the machine learning course. Basically focused on the same topic as the first week, regression problems (including linear and polynomial regression) and gradient descent. However, more details of gradient descent were talked about, and the idea of using vectorization to increase the efficiency of gradient descent was introduced.</p>
<h3 id="Polynomial-Regression"><a href="#Polynomial-Regression" class="headerlink" title="Polynomial Regression"></a>Polynomial Regression</h3><p>The process of polynomial regression is based on the process of linear regression, except for the fact that it creates new features out of the original features of the dataset. In other words, suppose if you have two features <em>a</em> and <em>b</em>, we can create three more features <em>a<sup>2</sup></em>, <em>ab</em>, and <em>b<sup>2</sup></em>. This way, we can fit non-linear data using a method very similar to linear regression.</p>
<p>It is also worth noticing in this example of the relationship between house prices and house sizes that, although both hypotheses fit the dataset well, it is uncommon for house prices to drop when the size reaches a certain amount, so the second hypothesis would be a better choice.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/polynomial_regression.png" width="500"></p>
<h3 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h3><p>Vectorization is a way increase the efficiency of calculations by doing matrix and vector multiplications instead of using looping over the elements one by one. It works because most programming languages have linear algebra libraries that are optimized for computations like this.</p>
<p>This is an example of vectorization. The superscript <em>T</em> means taking the transpose of the matrix or vector.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/vectorization.png" width="700"></p>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Supervised Learning </tag>
            
            <tag> Regression </tag>
            
            <tag> Vectorization </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Week 1: Machine Learning Introduction and Linear Regression]]></title>
      <url>/2017/04/07/machine_learning_introduction_and_linear_regression/</url>
      <content type="html"><![CDATA[<p>Resources from <a href="https://www.coursera.org/learn/machine-learning/" target="_blank" rel="external">Coursera</a>.</p>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>Just took up a machine learning course on Coursera recommended by a friend of mine last week. So I decided to update this blog constantly to keep track of what I’ve learnt so far. The lectures and reading materials in the first week were quite easy to understand. Andrew Ng, the professor who taught the course, went over concepts related to different types of machine learning, and talked briefly about linear regression with one variable.</p>
<h3 id="Supervised-and-Unsupervised-Learning"><a href="#Supervised-and-Unsupervised-Learning" class="headerlink" title="Supervised and Unsupervised Learning"></a>Supervised and Unsupervised Learning</h3><p>In supervised learning, we are given a dataset and already know what the correct output should look like, and we use the relationship between the given inputs and outputs to predict the outputs of new inputs.</p>
<p>In unsupervised learning, we do not know the relationship between inputs and outputs, instead, we try to find structures in the data given by making clusters out of the dataset.</p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/supervised_learning.png" width="250" height="230"> <img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/unsupervised_learning.png" width="250" height="230"></p>
<h3 id="Classification-and-Regression"><a href="#Classification-and-Regression" class="headerlink" title="Classification and Regression"></a>Classification and Regression</h3><p>Supervised learning can also be divided into two categories, classification and regression. In classification problems, we try to predict the categories of the given inputs. In regression problems, we try to predict the outputs within a continuous output; in other words, we try to find a continuous function which predicts an output value for each input value.</p>
<h3 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h3><p>Generally speaking, linear regression is simply the process of finding linear function that fits the dataset well. The function is called the hypothesis. In the process, we do iterations to minimize a cost function <span>$J(\theta_0, \theta_1) = \dfrac {1}{2m} \displaystyle \sum _{i=1}^m \left (h_\theta (x_{i}) - y_{i} \right)^2$</span><!-- Has MathJax -->, which represents the sum of squared error between the hypothesis function and the given outputs of the dataset.</p>
<p>To do this, we implement something called gradient descent. During gradient descent, we calculate the partial derivative of the cost function with respect to each parameter and change the parameter in a way that decreases the cost function by the largest amount. <span>$\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta)$</span><!-- Has MathJax --></p>
<p><img src="https://raw.githubusercontent.com/leniumC/blog_resources/master/gradient_descent.png" width="600"></p>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Supervised Learning </tag>
            
            <tag> Regression </tag>
            
            <tag> Unsupervised Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matrix Chain Multiplication]]></title>
      <url>/2016/09/15/matrix_chain_multiplication/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=383" target="_blank" rel="external">UVA Online Judge</a>.</p>
<h2 id="Matrix-Chain-Multiplication"><a href="#Matrix-Chain-Multiplication" class="headerlink" title="Matrix Chain Multiplication"></a>Matrix Chain Multiplication</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Suppose you have to evaluate an expression like A*B*C*D*E where A,B,C,D and E are matrices. Since matrix multiplication is associative, the order in which multiplications are performed is arbitrary. However, the number of elementary multiplications needed strongly depends on the evaluation order you choose.</p>
<p>For example, let A be a 50*10 matrix, B a 10*20 matrix and C a 20*5 matrix. There are two different strategies to compute A*B*C, namely (A*B)*C and A*(B*C). The first one takes 15000 elementary multiplications, but the second one only 3500.</p>
<p>Your job is to write a program that determines the number of elementary multiplications needed for a given evaluation strategy.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Input consists of two parts: a list of matrices and a list of expressions.</p>
<p>The first line of the input file contains one integer <em>n</em> (1 ≤ <em>n</em> ≤ 26), representing the number of<br>matrices in the first part. The next <em>n</em> lines each contain one capital letter, specifying the name of the<br>matrix, and two integers, specifying the number of rows and columns of the matrix.</p>
<p>The second part of the input file strictly adheres to the following syntax (given in EBNF):<br>SecondPart = Line { Line } <eof><br>Line = Expression <cr><br>Expression = Matrix | “(“ Expression Expression “)”<br>Matrix = “A” | “B” | “C” | … | “X” | “Y” | “Z”</cr></eof></p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each expression found in the second part of the input file, print one line containing the word ‘error’<br>if evaluation of the expression leads to an error due to non-matching matrices. Otherwise print one<br>line containing the number of elementary multiplications needed to evaluate the expression in the way<br>specified by the parentheses.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>We can simply simulate the calculations by using a stack. Each time a matrix is inputted, we push it into the stack. Each time we come across a right bracket, we take out two matrices on top and calculate the dimensions of the product, add the number of calculations to the integer <em>sum</em>, and push the product into the stack. If the two matrices cannot be multiplied, we simply print “error”; otherwise, the integer <em>sum</em> is printed.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> matrix
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> a<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span>
<span class="token keyword">char</span> t1<span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>t1<span class="token punctuation">;</span>
        t2<span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">(</span>t1<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">>></span>a<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stack<span class="token operator">&lt;</span>matrix<span class="token operator">></span> s<span class="token punctuation">;</span>
        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        ok<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'('</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">')'</span><span class="token punctuation">)</span>
                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                p1<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                p2<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>r<span class="token operator">!=</span>p2<span class="token punctuation">.</span>c<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    ok<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                sum<span class="token operator">+</span><span class="token operator">=</span>p1<span class="token punctuation">.</span>r<span class="token operator">*</span>p1<span class="token punctuation">.</span>c<span class="token operator">*</span>p2<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
                p1<span class="token punctuation">.</span>r<span class="token operator">=</span>p2<span class="token punctuation">.</span>r<span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span>
            cout<span class="token operator">&lt;&lt;</span><span class="token string">"error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Stack </tag>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Polycarp at the Radio]]></title>
      <url>/2016/09/02/polycarp_at_the_radio/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="http://codeforces.com/problemset/problem/723/C" target="_blank" rel="external">Codeforces</a>.</p>
<h2 id="Polycarp-at-the-Radio"><a href="#Polycarp-at-the-Radio" class="headerlink" title="Polycarp at the Radio"></a>Polycarp at the Radio</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Polycarp is a music editor at the radio station. He received a playlist for tomorrow, that can be represented as a sequence <em>a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub></em>, where <em>a<sub>i</sub></em> is a band, which performs the <em>i</em>-th song. Polycarp likes bands with the numbers from 1 to <em>m</em>, but he doesn’t really like others.</p>
<p>We define as <em>b<sub>j</sub></em> the number of songs the group <em>j</em> is going to perform tomorrow. Polycarp wants to change the playlist in such a way that the minimum among the numbers <em>b<sub>1</sub>, b<sub>2</sub>, …, b<sub>m</sub></em> will be as large as possible.</p>
<p>Find this maximum possible value of the minimum among the bj (1 ≤ <em>j</em> ≤ <em>m</em>), and the minimum number of changes in the playlist Polycarp needs to make to achieve it. One change in the playlist is a replacement of the performer of the <em>i</em>-th song with any other group.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input contains two integers n and m (1 ≤ <em>m</em> ≤ <em>n</em> ≤ 2000).</p>
<p>The second line contains <em>n</em> integers <em>a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub></em> (1 ≤ <em>a<sub>i</sub></em> ≤ 10<sup>9</sup>), where ai is the performer of the i-th song.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>In the first line print two integers: the maximum possible value of the minimum among the bj (1 ≤ <em>j</em> ≤ <em>m</em>), where <em>b<sub>j</sub></em> is the number of songs in the changed playlist performed by the <em>j</em>-th band, and the minimum number of changes in the playlist Polycarp needs to make.</p>
<p>In the second line print the changed playlist.</p>
<p>If there are multiple answers, print any of them.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Input<br>4 2<br>1 2 3 2<br>Output<br>2 1<br>1 2 1 2</p>
<p>Input<br>7 3<br>1 3 2 2 2 2 1<br>Output<br>2 1<br>1 3 3 2 2 2 1</p>
<p>Input<br>4 4<br>1000000000 100 7 1000000000<br>Output<br>1 4<br>1 2 3 4</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The general idea is that, the maximum value of the minimum of the values is equal to <em>n</em>/<em>m</em>. We iterate through a vector storing how many times each band plays and use another vector to store the difference between that number and the average. Then, we iterate through the vector <em>a<sub>i</sub></em> to change the playlist.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">2010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>band<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span>tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ave<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>
            band<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ave<span class="token operator">=</span>n<span class="token operator">/</span>m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ave<span class="token operator">-</span>band<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>ave<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>m<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            add<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            add<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Greedy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Number Cards]]></title>
      <url>/2016/08/13/number_cards/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="http://bnds.tech/problem/8" target="_blank" rel="external">BNDSOJ</a>.</p>
<h2 id="数字卡之沙耶香的音符"><a href="#数字卡之沙耶香的音符" class="headerlink" title="数字卡之沙耶香的音符"></a>数字卡之沙耶香的音符</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>最近沉迷于魔法少女小圆的MisakaMikoto喜欢上了蓝毛沙耶香，于是他正在收集各式各样的音符卡片，但是我们都知道只有经过合理组合的音符才能够发出让人心旷神怡你的音乐，于是MisakaMikoto找到了小提琴专家AD1024帮助他找到了一个适合的音符卡片组合。可是MisakaMikoto家的猫趁他不在家的时候把他收集的音符卡片弄乱了，而穿越时空而来的沙耶香发现了这件事后又重新将这些音符卡片进行了排列，这让MisakaMikoto非常的头大，于是他找到了已经做完了teacherone交付的任务正闲着的你，希望你能够帮他找到在这个排列中找到AD1024所写的音符卡组合。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数NN, MM, 分别表示沙耶香重新排列的所有音符卡的长度以及AD1024所找到的音符卡组合的长度</p>
<p>第二行<em>N</em>个正整数<em>Ni</em>, 表示每一个音符</p>
<p>第三行<em>M</em>个正整数<em>Mi</em>, 表示每一个音符</p>
<p>注：输入保证<em>M&lt;N</em></p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>第一行若干个正整数，表示AD1024的音符卡片排列在沙耶香重新组合的音符卡片排列中的哪些位置出现了</p>
<p>第二行两个正整数，分别表示第一次出现的最开头和最后一次出现的最末尾</p>
<p>如果没有出现过，输出”Orz yulemao”.</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>输入样例1<br>9 3<br>1 2 3 1 2 3 1 2 3<br>1 2 3  </p>
<p>输出样例1<br>1 4 7<br>1 9  </p>
<p>输入样例2<br>9 4<br>1 2 3 1 2 3 1 2 3<br>1 2 3 4  </p>
<p>输出样例2<br>Orz yulemao</p>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于20%的数据 1≤<em>N</em>≤10,1≤<em>M</em>≤3<br>对于40%的数据 1≤<em>N</em>≤100,1≤<em>M</em>≤10<br>对于70%的数据 1≤<em>N</em>≤10,000,1≤<em>M</em>≤150<br>对于100%的数据 1≤<em>N</em>≤1,000,000,1≤<em>M</em>≤1,000,1&lt;<em>Ni</em>,<em>Mi</em>&lt;10,000,000,000</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>In this problem, you are required to find a specific subsequence of numbers in given sequence. You have to find the place of the first number where the subsequence is found the first time and the place of the last number where the subsequence is found the last time.</p>
<p>It is a pretty straightforward KMP problem. Although KMP is mainly used for finding substrings, it could also be used in this problem to find subsequences of numbers.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span>maxn <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sub<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Next<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> first <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> last<span class="token punctuation">;</span>

    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin <span class="token operator">>></span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                first <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            last <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Orz yulemao"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> last <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> KMP </tag>
            
            <tag> String </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Subset Sums]]></title>
      <url>/2016/08/07/subset_sums/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="http://train.usaco.org/usacogate" target="_blank" rel="external">USACO</a>.  </p>
<h2 id="Subset-Sums"><a href="#Subset-Sums" class="headerlink" title="Subset Sums"></a>Subset Sums</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>For many sets of consecutive integers from 1 through <em>N</em> (1 &lt;= <em>N</em> &lt;= 39), one can partition the set into two sets whose sums are identical.</p>
<p>For example, if <em>N</em>=3, one can partition the set {1, 2, 3} in one way so that the sums of both subsets are identical:</p>
<p>{3} and {1,2}<br>This counts as a single partitioning (i.e., reversing the order counts as the same partitioning and thus does not increase the count of partitions).</p>
<p>If <em>N</em>=7, there are four ways to partition the set {1, 2, 3, … 7} so that each partition has the same sum:</p>
<p>{1,6,7} and {2,3,4,5}<br>{2,5,7} and {1,3,4,6}<br>{3,4,7} and {1,2,5,6}<br>{1,2,4,7} and {3,5,6}<br>Given N, your program should print the number of ways a set containing the integers from 1 through <em>N</em> can be partitioned into two sets whose sums are identical. Print 0 if there are no such ways.</p>
<p>Your program must calculate the answer, not look it up from a table.</p>
<h3 id="Input-Format"><a href="#Input-Format" class="headerlink" title="Input Format"></a>Input Format</h3><p>The input file contains a single line with a single integer representing <em>N</em>, as above.</p>
<h3 id="Output-Format"><a href="#Output-Format" class="headerlink" title="Output Format"></a>Output Format</h3><p>The output file contains a single line with a single integer that tells how many same-sum partitions can be made from the set {1, 2, …, <em>N</em>}. The output file should contain 0 if there are no ways to make a same-sum partition.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>7</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>4</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>First of all, if the sum is odd, then there is no solution. Dynamic programming could be used to solve this problem. Specifically, <em>dp[i]</em> stands for the ways to make a set of a sum <em>i</em> and we can update <em>dp[i]</em> using the values of <em>dp[j]</em> where <em>j</em> &lt; <em>i</em>, which has been calculated already.</p>
<p>It is worth noticing that the inner loop decreases <em>j</em> from <em>m</em> to <em>i</em> instead of the other way around.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn <span class="token operator">*</span> maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// freopen("subset.in", "r", stdin);</span>
    <span class="token comment" spellcheck="true">// freopen("subset.out", "w", stdout);</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    m <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Strange Elevator]]></title>
      <url>/2016/08/04/strange_elevator/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://www.luogu.org/problem/show?pid=1135" target="_blank" rel="external">Luogu</a>.  </p>
<h2 id="P1135-奇怪的电梯"><a href="#P1135-奇怪的电梯" class="headerlink" title="P1135 奇怪的电梯"></a>P1135 奇怪的电梯</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>呵呵，有一天我做了一个梦，梦见了一种很奇怪的电梯。大楼的每一层楼都可以停电梯，而且第i层楼(1&lt;=i&lt;=N)上有一个数字Ki(0&lt;=Ki&lt;=N)。电梯只有四个按钮：开，关，上，下。上下的层数等于当前楼层上的那个数字。当然，如果不能满足要求，相应的按钮就会失灵。例如：3 3 1 2 5代表了Ki(K1=3,K2=3,……)，从一楼开始。在一楼，按“上”可以到4楼，按“下”是不起作用的，因为没有-2楼。那么，从A楼到B楼至少要按几次按钮呢？</p>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：<br>输入文件共有二行，第一行为三个用空格隔开的正整数，表示N,A,B(1≤N≤200, 1≤A,B≤N)，第二行为N个用空格隔开的正整数，表示Ki。</p>
<p>输出格式：<br>输出文件仅一行，即最少按键次数,若无法到达，则输出-1。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>In the problem, you are in a strange elevator. There are in <em>N</em> floors in total, each with a number <em>k</em> on it. You can either press up or down on each floor and it will go up or down <em>k</em> floors (only if floor number is valid). You are currently on floor <em>A</em> and you want to go to floor <em>B</em>. How many steps will it take? Or print -1 if the destination cannot be reached.</p>
<p>The simplest way to do this is to use BFS. Start off at floor <em>A</em> and try to reach floor <em>B</em>. The <em>v</em> array is used mark whether a floor has already been visited. <em>ans</em> is initially set as -1, and if the floor cannot be reached, <em>ans</em> will not change its value.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> map<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> layer
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>st<span class="token punctuation">;</span>
<span class="token punctuation">}</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cin<span class="token operator">>></span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t<span class="token punctuation">.</span>n<span class="token operator">=</span>a<span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>st<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span>layer<span class="token operator">></span> q<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        layer p<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>n<span class="token operator">+</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token operator">+</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            layer tt<span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>n<span class="token operator">=</span>p<span class="token punctuation">.</span>n<span class="token operator">+</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>st<span class="token operator">=</span>p<span class="token punctuation">.</span>st<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>n<span class="token operator">==</span>b<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>    
                ans<span class="token operator">=</span>tt<span class="token punctuation">.</span>st<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>tt<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>n<span class="token operator">-</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>v<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token operator">-</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            layer tt<span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>n<span class="token operator">=</span>p<span class="token punctuation">.</span>n<span class="token operator">-</span>map<span class="token punctuation">[</span>p<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tt<span class="token punctuation">.</span>st<span class="token operator">=</span>p<span class="token punctuation">.</span>st<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>n<span class="token operator">==</span>b<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                ans<span class="token operator">=</span>tt<span class="token punctuation">.</span>st<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            v<span class="token punctuation">[</span>tt<span class="token punctuation">.</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Search </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Select Numbers]]></title>
      <url>/2016/08/02/select_numbers/</url>
      <content type="html"><![CDATA[<p>Problem from <a href="https://www.luogu.org/problem/show?pid=1036" target="_blank" rel="external">Luogu</a>.  </p>
<h2 id="P1036-选数"><a href="#P1036-选数" class="headerlink" title="P1036 选数"></a>P1036 选数</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知 n 个整数 x1,x2,…,xn，以及一个整数 k（k＜n）。从 n 个整数中任选 k 个整数相加，可分别得到一系列的和。例如当 n=4，k＝3，4 个整数分别为 3，7，12，19 时，可得全部的组合与它们的和为：</p>
<p>3＋7＋12=22<br>3＋7＋19＝29<br>7＋12＋19＝38<br>3＋12＋19＝34。</p>
<p>现在，要求你计算出和为素数共有多少种。<br>例如上例，只有一种的和为素数：3＋7＋19＝29。</p>
<h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：<br>n , k （1&lt;=n&lt;=20，k＜n）<br>x1,x2，…,xn （1&lt;=xi&lt;=5000000）</p>
<p>输出格式：<br>一个整数（满足条件的种数）。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>In this problem, you have to select <em>k</em> from <em>n</em> numbers so that the sum of those numbers is a prime number.</p>
<p>It can be easily solved using a DFS, depth-first search, algorithm. Simply list the ways that the numbers can be selected and check if the sum is prime. In order to prevent counting the same sequence, in different orders, for several times, we can select numbers in an acsending or desending order.</p>
<p>The code is as follows.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> y<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>y<span class="token operator">*</span>y<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    amount<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span>k<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">select</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>count<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cin<span class="token operator">>></span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">select</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithms </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Search </tag>
            
            <tag> DFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Introduction]]></title>
      <url>/2016/07/28/introduction/</url>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>After weeks of theme selecting and configuring, it’s finally time to start blogging.</p>
<p>There isn’t much to say. I’ll probably be mainly blogging about stuff related to programming, mostly algorithms and C++, I suppose. Maybe other stuff will be included as well, but I’m not sure yet.</p>
<p>Well, that’s about all. Welcome to my blog. If you want to know more, visit me at <a href="https://github.com/leniumC" target="_blank" rel="external">Github</a>. If you come across any problems, or if you just want to chat, feel free to contact me at <em>leniumc@hotmail.com</em>.</p>
<p>Anyway, thanks for reading.</p>
]]></content>
      
        <categories>
            
            <category> Others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Daily </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/06/30/hello_world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
